#!/usr/bin/env python3
"""
Script para criar novas configura√ß√µes baseadas na configura√ß√£o base completa.

USO:
    python scripts/create_config.py <nome_config> [op√ß√µes]

EXEMPLOS:
    python scripts/create_config.py g1_test
    python scripts/create_config.py g1_production --mock
    python scripts/create_config.py g1_minimal --minimal
"""

import sys
import json
import shutil
from pathlib import Path
from typing import Dict, Any, List

def load_base_config() -> Dict[str, Any]:
    """Carrega a configura√ß√£o base completa."""
    base_path = Path("config/g1_base_complete.json5")
    
    if not base_path.exists():
        print(f"‚ùå Arquivo base n√£o encontrado: {base_path}")
        sys.exit(1)
    
    try:
        import json5
        with open(base_path, 'r') as f:
            return json5.load(f)
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√£o base: {e}")
        sys.exit(1)

def create_minimal_config(base_config: Dict[str, Any]) -> Dict[str, Any]:
    """Cria uma configura√ß√£o m√≠nima baseada na base."""
    config = base_config.copy()
    
    # Desativa funcionalidades n√£o essenciais
    config["name"] = "G1 Minimal"
    config["description"] = "Configura√ß√£o m√≠nima para testes b√°sicos"
    
    # Desativa inputs n√£o essenciais
    config["agent_inputs"]["G1GPS"]["enabled"] = False
    config["agent_inputs"]["G1Sensors"]["enabled"] = False
    
    # Desativa actions n√£o essenciais
    config["agent_actions"]["G1Arms"]["enabled"] = False
    
    # Simplifica conversa√ß√£o
    config["conversation_engine"]["enable_vision_context"] = False
    config["conversation_engine"]["enable_gesture_sync"] = False
    config["conversation_engine"]["enable_emotion_detection"] = False
    
    # Desativa m√©tricas avan√ßadas
    config["metrics"]["dashboards"]["enabled"] = False
    config["backup"]["enabled"] = False
    
    return config

def create_mock_config(base_config: Dict[str, Any]) -> Dict[str, Any]:
    """Cria uma configura√ß√£o com modo mock ativado."""
    config = base_config.copy()
    
    config["name"] = "G1 Mock"
    config["description"] = "Configura√ß√£o para testes sem hardware real"
    
    # Ativa modo mock em todos os componentes
    config["agent_inputs"]["G1Voice"]["mock_mode"] = True
    config["agent_inputs"]["G1Vision"]["mock_mode"] = True
    config["agent_inputs"]["G1State"]["mock_mode"] = True
    config["agent_inputs"]["G1Sensors"]["mock_mode"] = True
    config["agent_inputs"]["G1GPS"]["mock_mode"] = True
    
    config["agent_actions"]["G1Speech"]["mock_mode"] = True
    config["agent_actions"]["G1Emotion"]["mock_mode"] = True
    config["agent_actions"]["G1Movement"]["mock_mode"] = True
    config["agent_actions"]["G1Arms"]["mock_mode"] = True
    config["agent_actions"]["G1Audio"]["mock_mode"] = True
    
    # Ativa WebSim
    config["websim"]["enabled"] = True
    config["websim"]["mock_robot"] = True
    
    return config

def create_production_config(base_config: Dict[str, Any]) -> Dict[str, Any]:
    """Cria uma configura√ß√£o para produ√ß√£o."""
    config = base_config.copy()
    
    config["name"] = "G1 Production"
    config["description"] = "Configura√ß√£o otimizada para produ√ß√£o"
    
    # Desativa modo debug
    config["development"]["debug_mode"] = False
    config["development"]["websim_enabled"] = False
    
    # Ativa todas as funcionalidades reais
    config["agent_inputs"]["G1Voice"]["mock_mode"] = False
    config["agent_inputs"]["G1Vision"]["mock_mode"] = False
    config["agent_inputs"]["G1State"]["mock_mode"] = False
    config["agent_inputs"]["G1Sensors"]["mock_mode"] = False
    config["agent_inputs"]["G1GPS"]["mock_mode"] = False
    
    config["agent_actions"]["G1Speech"]["mock_mode"] = False
    config["agent_actions"]["G1Emotion"]["mock_mode"] = False
    config["agent_actions"]["G1Movement"]["mock_mode"] = False
    config["agent_actions"]["G1Arms"]["mock_mode"] = False
    config["agent_actions"]["G1Audio"]["mock_mode"] = False
    
    # Desativa WebSim
    config["websim"]["enabled"] = False
    
    # Ativa backup e m√©tricas
    config["backup"]["enabled"] = True
    config["metrics"]["enabled"] = True
    
    # Configura√ß√µes de seguran√ßa
    config["security"]["access_control"]["enabled"] = True
    config["security"]["data_protection"]["privacy_mode"] = True
    
    return config

def create_test_config(base_config: Dict[str, Any]) -> Dict[str, Any]:
    """Cria uma configura√ß√£o para testes."""
    config = base_config.copy()
    
    config["name"] = "G1 Test"
    config["description"] = "Configura√ß√£o para testes integrados"
    
    # Ativa modo debug
    config["development"]["debug_mode"] = True
    config["development"]["websim_enabled"] = True
    
    # Configura√ß√µes de teste
    config["logging"]["level"] = "DEBUG"
    config["metrics"]["enabled"] = True
    
    # Timeouts menores para testes
    config["unitree_g1"]["interface"]["timeout"] = 5.0
    config["unitree_g1"]["controller"]["audio_timeout"] = 3.0
    
    return config

def save_config(config: Dict[str, Any], filename: str):
    """Salva a configura√ß√£o em arquivo JSON5."""
    config_dir = Path("config")
    config_dir.mkdir(exist_ok=True)
    
    filepath = config_dir / f"{filename}.json5"
    
    try:
        # Converter para JSON5 (com coment√°rios)
        json5_content = json.dumps(config, indent=2, ensure_ascii=False)
        
        # Adicionar cabe√ßalho
        header = f"""// ========================================
// CONFIGURA√á√ÉO: {config['name']}
// ========================================
// 
// Baseada em: config/g1_base_complete.json5
// Criada em: {Path().cwd()}
// 
// ========================================

"""
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(header + json5_content)
        
        print(f"‚úÖ Configura√ß√£o salva: {filepath}")
        
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√£o: {e}")
        sys.exit(1)

def print_usage():
    """Mostra como usar o script."""
    print("""
üéØ CRIADOR DE CONFIGURA√á√ïES - SISTEMA t031a5

USO:
    python scripts/create_config.py <nome_config> [op√ß√µes]

OP√á√ïES:
    --minimal     Cria configura√ß√£o m√≠nima (apenas funcionalidades essenciais)
    --mock        Cria configura√ß√£o com modo mock ativado
    --production  Cria configura√ß√£o otimizada para produ√ß√£o
    --test        Cria configura√ß√£o para testes integrados
    --help        Mostra esta ajuda

EXEMPLOS:
    python scripts/create_config.py g1_test
    python scripts/create_config.py g1_production --production
    python scripts/create_config.py g1_mock --mock
    python scripts/create_config.py g1_minimal --minimal

CONFIGURA√á√ïES CRIADAS:
    - config/<nome_config>.json5
""")

def main():
    """Fun√ß√£o principal."""
    if len(sys.argv) < 2 or "--help" in sys.argv:
        print_usage()
        return
    
    config_name = sys.argv[1]
    
    # Validar nome da configura√ß√£o
    if not config_name.replace("_", "").replace("-", "").isalnum():
        print("‚ùå Nome da configura√ß√£o deve conter apenas letras, n√∫meros, _ e -")
        sys.exit(1)
    
    print(f"üéØ Criando configura√ß√£o: {config_name}")
    
    # Carregar configura√ß√£o base
    base_config = load_base_config()
    print("‚úÖ Configura√ß√£o base carregada")
    
    # Determinar tipo de configura√ß√£o
    config = base_config.copy()
    
    if "--minimal" in sys.argv:
        print("üì¶ Criando configura√ß√£o m√≠nima...")
        config = create_minimal_config(base_config)
    elif "--mock" in sys.argv:
        print("üé≠ Criando configura√ß√£o mock...")
        config = create_mock_config(base_config)
    elif "--production" in sys.argv:
        print("üè≠ Criando configura√ß√£o de produ√ß√£o...")
        config = create_production_config(base_config)
    elif "--test" in sys.argv:
        print("üß™ Criando configura√ß√£o de teste...")
        config = create_test_config(base_config)
    else:
        print("üìã Criando configura√ß√£o padr√£o...")
        config["name"] = f"G1 {config_name.title()}"
        config["description"] = f"Configura√ß√£o personalizada: {config_name}"
    
    # Salvar configura√ß√£o
    save_config(config, config_name)
    
    print(f"\nüéâ Configura√ß√£o '{config_name}' criada com sucesso!")
    print(f"üìÅ Arquivo: config/{config_name}.json5")
    print(f"üìã Para usar: --config config/{config_name}.json5")

if __name__ == "__main__":
    main()
