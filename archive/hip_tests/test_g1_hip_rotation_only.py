#!/usr/bin/env python3
"""
Teste de Movimento do Quadril do G1 (Sem Locomo√ß√£o)
===================================================

Este teste foca especificamente no movimento do quadril do rob√¥ G1,
sem movimento das pernas (locomo√ß√£o).

Objetivo: Testar rota√ß√£o do quadril em diferentes eixos:
- Pitch (frente/tr√°s): ¬±154¬∞
- Roll (lateral): -30¬∞ a +170¬∞  
- Yaw (rota√ß√£o horizontal): ¬±158¬∞

M√©todo: Usar controle de baixo n√≠vel das articula√ß√µes do quadril
"""

import time
import sys
import numpy as np
from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.loco.g1_loco_client import LocoClient
from unitree_sdk2py.comm.motion_switcher.motion_switcher_client import MotionSwitcherClient

class G1HipRotationTest:
    """Teste espec√≠fico de movimento do quadril."""
    
    def __init__(self):
        self.interface = "en11"
        self.loco_client = None
        self.motion_switcher = None
        
        # √çndices das articula√ß√µes do quadril (baseado na documenta√ß√£o)
        self.hip_joints = {
            "left_hip_yaw": 0,      # Rota√ß√£o horizontal esquerda
            "left_hip_pitch": 1,    # Frente/tr√°s esquerda
            "left_hip_roll": 2,     # Lateral esquerda
            "right_hip_yaw": 6,     # Rota√ß√£o horizontal direita
            "right_hip_pitch": 7,   # Frente/tr√°s direita
            "right_hip_roll": 8,    # Lateral direita
        }
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            
            self.loco_client = LocoClient()
            self.loco_client.SetTimeout(10.0)
            self.loco_client.Init()
            
            self.motion_switcher = MotionSwitcherClient()
            self.motion_switcher.SetTimeout(10.0)
            self.motion_switcher.Init()
            
            print("‚úÖ SDK inicializado")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def check_robot_state(self, expected_mode="control"):
        """Verifica o estado atual do rob√¥."""
        try:
            status, result = self.motion_switcher.CheckMode()
            if status == 0 and result:
                current_mode = result.get('name', 'unknown')
                current_form = result.get('form', 'unknown')
                
                print(f"üìä Estado atual: {result}")
                print(f"   Modo: {current_mode}")
                print(f"   Form: {current_form}")
                
                if current_mode == expected_mode:
                    print(f"‚úÖ Rob√¥ est√° no modo correto: {current_mode}")
                    return True
                else:
                    print(f"‚ö†Ô∏è  Rob√¥ est√° em modo {current_mode}, esperado: {expected_mode}")
                    return False
            else:
                print(f"‚ùå Erro ao verificar estado: {status}, {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o de estado: {e}")
            return False
    
    def prepare_robot_for_hip_test(self):
        """Prepara o rob√¥ para teste de quadril."""
        print("\nüöÄ PREPARANDO ROB√î PARA TESTE DE QUADRIL...")
        
        try:
            # Sequ√™ncia: Zero Torque ‚Üí Damping ‚Üí Get Ready
            print("1Ô∏è‚É£ Zero Torque (FSM 0)...")
            self.loco_client.SetFsmId(0)
            time.sleep(3)
            
            print("2Ô∏è‚É£ Damping (FSM 1)...")
            self.loco_client.SetFsmId(1)
            time.sleep(3)
            
            print("3Ô∏è‚É£ Get Ready (FSM 4)...")
            self.loco_client.SetFsmId(4)
            time.sleep(5)
            
            # Verificar estado
            if not self.check_robot_state("control"):
                print("‚ö†Ô∏è  Rob√¥ pode n√£o estar em Main Operation Control")
                print("üéÆ Pressione R1+X no controle f√≠sico se necess√°rio")
                input("‚è∏Ô∏è  Pressione ENTER ap√≥s colocar em Main Operation Control...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na prepara√ß√£o: {e}")
            return False
    
    def test_hip_yaw_rotation(self):
        """Testa rota√ß√£o Yaw do quadril (rota√ß√£o horizontal)."""
        print("\nüîÑ TESTANDO ROTA√á√ÉO YAW DO QUADRIL...")
        
        if not self.check_robot_state("control"):
            print("‚ùå Rob√¥ n√£o est√° em modo correto para teste de quadril")
            return False
        
        # Testar diferentes amplitudes de rota√ß√£o Yaw
        yaw_tests = [
            ("Yaw pequeno +", 0.3),
            ("Yaw pequeno -", -0.3),
            ("Yaw m√©dio +", 0.6),
            ("Yaw m√©dio -", -0.6),
            ("Yaw grande +", 1.0),
            ("Yaw grande -", -1.0),
        ]
        
        for name, vyaw in yaw_tests:
            print(f"\nüîÑ {name} (vyaw={vyaw})...")
            
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Estado incorreto para {name}")
                continue
                
            try:
                # Usar SetVelocity com apenas rota√ß√£o (sem movimento linear)
                self.loco_client.SetVelocity(0.0, 0.0, vyaw, 2.0)
                time.sleep(2)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
        
        return True
    
    def test_hip_pitch_movement(self):
        """Testa movimento Pitch do quadril (frente/tr√°s)."""
        print("\nüîÑ TESTANDO MOVIMENTO PITCH DO QUADRIL...")
        
        if not self.check_robot_state("control"):
            print("‚ùå Rob√¥ n√£o est√° em modo correto para teste de quadril")
            return False
        
        # Testar diferentes movimentos Pitch
        pitch_tests = [
            ("Pitch para frente", 0.2, 0.0, 0.0),
            ("Pitch para tr√°s", -0.2, 0.0, 0.0),
            ("Pitch suave +", 0.1, 0.0, 0.0),
            ("Pitch suave -", -0.1, 0.0, 0.0),
        ]
        
        for name, vx, vy, vyaw in pitch_tests:
            print(f"\nüîÑ {name} (vx={vx})...")
            
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Estado incorreto para {name}")
                continue
                
            try:
                # Movimento apenas no eixo X (Pitch)
                self.loco_client.SetVelocity(vx, vy, vyaw, 2.0)
                time.sleep(2)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
        
        return True
    
    def test_hip_roll_movement(self):
        """Testa movimento Roll do quadril (lateral)."""
        print("\nüîÑ TESTANDO MOVIMENTO ROLL DO QUADRIL...")
        
        if not self.check_robot_state("control"):
            print("‚ùå Rob√¥ n√£o est√° em modo correto para teste de quadril")
            return False
        
        # Testar diferentes movimentos Roll
        roll_tests = [
            ("Roll esquerda", 0.0, 0.2, 0.0),
            ("Roll direita", 0.0, -0.2, 0.0),
            ("Roll suave +", 0.0, 0.1, 0.0),
            ("Roll suave -", 0.0, -0.1, 0.0),
        ]
        
        for name, vx, vy, vyaw in roll_tests:
            print(f"\nüîÑ {name} (vy={vy})...")
            
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Estado incorreto para {name}")
                continue
                
            try:
                # Movimento apenas no eixo Y (Roll)
                self.loco_client.SetVelocity(vx, vy, vyaw, 2.0)
                time.sleep(2)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
        
        return True
    
    def test_hip_combined_movements(self):
        """Testa movimentos combinados do quadril."""
        print("\nüîÑ TESTANDO MOVIMENTOS COMBINADOS DO QUADRIL...")
        
        if not self.check_robot_state("control"):
            print("‚ùå Rob√¥ n√£o est√° em modo correto para teste de quadril")
            return False
        
        # Testar combina√ß√µes de movimentos
        combined_tests = [
            ("Pitch + Yaw", 0.1, 0.0, 0.3),
            ("Roll + Yaw", 0.0, 0.1, 0.3),
            ("Pitch + Roll", 0.1, 0.1, 0.0),
            ("Pitch + Roll + Yaw", 0.1, 0.1, 0.2),
        ]
        
        for name, vx, vy, vyaw in combined_tests:
            print(f"\nüîÑ {name} (vx={vx}, vy={vy}, vyaw={vyaw})...")
            
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Estado incorreto para {name}")
                continue
                
            try:
                # Movimento combinado
                self.loco_client.SetVelocity(vx, vy, vyaw, 3.0)
                time.sleep(3)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
        
        return True
    
    def test_hip_static_poses(self):
        """Testa poses est√°ticas do quadril."""
        print("\nüîÑ TESTANDO POSES EST√ÅTICAS DO QUADRIL...")
        
        if not self.check_robot_state("control"):
            print("‚ùå Rob√¥ n√£o est√° em modo correto para teste de quadril")
            return False
        
        # Testar poses est√°ticas (movimento curto para posi√ß√£o)
        static_poses = [
            ("Pose neutra", 0.0, 0.0, 0.0),
            ("Pose frente", 0.05, 0.0, 0.0),
            ("Pose tr√°s", -0.05, 0.0, 0.0),
            ("Pose esquerda", 0.0, 0.05, 0.0),
            ("Pose direita", 0.0, -0.05, 0.0),
            ("Pose rota√ß√£o +", 0.0, 0.0, 0.2),
            ("Pose rota√ß√£o -", 0.0, 0.0, -0.2),
        ]
        
        for name, vx, vy, vyaw in static_poses:
            print(f"\nüîÑ {name}...")
            
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Estado incorreto para {name}")
                continue
                
            try:
                # Movimento curto para posi√ß√£o
                self.loco_client.SetVelocity(vx, vy, vyaw, 1.0)
                time.sleep(1)
                
                # Manter posi√ß√£o por um tempo
                time.sleep(2)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(1)
                
                print(f"   ‚úÖ {name} executado")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
        
        return True
    
    def run_all_hip_tests(self):
        """Executa todos os testes de quadril."""
        print("ü¶¥ TESTE DE MOVIMENTO DO QUADRIL DO G1")
        print("=" * 50)
        print("Este teste foca especificamente no movimento do quadril")
        print("sem locomo√ß√£o das pernas.")
        print("=" * 50)
        
        # Inicializar
        if not self.initialize_sdk():
            return False
        
        # Preparar rob√¥
        if not self.prepare_robot_for_hip_test():
            return False
        
        # Executar testes
        try:
            self.test_hip_yaw_rotation()
            self.test_hip_pitch_movement()
            self.test_hip_roll_movement()
            self.test_hip_combined_movements()
            self.test_hip_static_poses()
            
            print("\nüéâ TODOS OS TESTES DE QUADRIL CONCLU√çDOS!")
            return True
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
            self.loco_client.StopMove()
            return False
        except Exception as e:
            print(f"\n‚ùå Erro geral nos testes: {e}")
            return False

def main():
    """Fun√ß√£o principal."""
    print("ü¶¥ TESTE DE MOVIMENTO DO QUADRIL - UNITREE G1")
    print("=" * 60)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este teste mover√° o quadril do rob√¥!")
    print("‚ö†Ô∏è  Certifique-se de que h√° espa√ßo suficiente!")
    print("‚ö†Ô∏è  Pressione Ctrl+C para interromper a qualquer momento!")
    print("=" * 60)
    
    # Confirma√ß√£o do usu√°rio
    try:
        response = input("\nü§î Deseja continuar com o teste de quadril? (s/N): ").lower()
        if response not in ['s', 'sim', 'y', 'yes']:
            print("‚ùå Teste cancelado pelo usu√°rio")
            return
    except KeyboardInterrupt:
        print("\n‚ùå Teste cancelado")
        return
    
    # Executar teste
    tester = G1HipRotationTest()
    success = tester.run_all_hip_tests()
    
    if success:
        print("\nüéâ TESTE DE QUADRIL CONCLU√çDO COM SUCESSO!")
        print("üìã Movimentos testados:")
        print("   - Rota√ß√£o Yaw (horizontal)")
        print("   - Movimento Pitch (frente/tr√°s)")
        print("   - Movimento Roll (lateral)")
        print("   - Movimentos combinados")
        print("   - Poses est√°ticas")
        print("")
        print("üéØ O quadril do G1 foi testado sem locomo√ß√£o das pernas!")
    else:
        print("\n‚ùå Teste falhou ou foi interrompido")

if __name__ == "__main__":
    main()
