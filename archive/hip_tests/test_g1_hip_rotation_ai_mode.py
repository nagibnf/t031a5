#!/usr/bin/env python3
"""
Teste de Movimento do Quadril do G1 (Modo AI)
=============================================

Este teste foca especificamente no movimento do quadril do rob√¥ G1,
funcionando no modo AI (sem locomo√ß√£o das pernas).

Objetivo: Testar rota√ß√£o do quadril em diferentes eixos:
- Pitch (frente/tr√°s): ¬±154¬∞
- Roll (lateral): -30¬∞ a +170¬∞  
- Yaw (rota√ß√£o horizontal): ¬±158¬∞

M√©todo: Usar controle de baixo n√≠vel das articula√ß√µes do quadril
no modo AI (sem movimento das pernas)
"""

import time
import sys
import numpy as np
from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.loco.g1_loco_client import LocoClient
from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient
from unitree_sdk2py.comm.motion_switcher.motion_switcher_client import MotionSwitcherClient

class G1HipRotationAITest:
    """Teste espec√≠fico de movimento do quadril no modo AI."""
    
    def __init__(self):
        self.interface = "en11"
        self.loco_client = None
        self.arm_client = None
        self.motion_switcher = None
        
        # √çndices das articula√ß√µes do quadril (baseado na documenta√ß√£o)
        self.hip_joints = {
            "left_hip_yaw": 0,      # Rota√ß√£o horizontal esquerda
            "left_hip_pitch": 1,    # Frente/tr√°s esquerda
            "left_hip_roll": 2,     # Lateral esquerda
            "right_hip_yaw": 6,     # Rota√ß√£o horizontal direita
            "right_hip_pitch": 7,   # Frente/tr√°s direita
            "right_hip_roll": 8,    # Lateral direita
        }
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            
            self.loco_client = LocoClient()
            self.loco_client.SetTimeout(10.0)
            self.loco_client.Init()
            
            self.arm_client = G1ArmActionClient()
            self.arm_client.SetTimeout(10.0)
            self.arm_client.Init()
            
            self.motion_switcher = MotionSwitcherClient()
            self.motion_switcher.SetTimeout(10.0)
            self.motion_switcher.Init()
            
            print("‚úÖ SDK inicializado")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def check_robot_state(self, expected_mode="ai"):
        """Verifica o estado atual do rob√¥."""
        try:
            status, result = self.motion_switcher.CheckMode()
            if status == 0 and result:
                current_mode = result.get('name', 'unknown')
                current_form = result.get('form', 'unknown')
                
                print(f"üìä Estado atual: {result}")
                print(f"   Modo: {current_mode}")
                print(f"   Form: {current_form}")
                
                if current_mode == expected_mode:
                    print(f"‚úÖ Rob√¥ est√° no modo correto: {current_mode}")
                    return True
                else:
                    print(f"‚ö†Ô∏è  Rob√¥ est√° em modo {current_mode}, esperado: {expected_mode}")
                    return False
            else:
                print(f"‚ùå Erro ao verificar estado: {status}, {result}")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o de estado: {e}")
            return False
    
    def prepare_robot_for_hip_test(self):
        """Prepara o rob√¥ para teste de quadril no modo AI."""
        print("\nüöÄ PREPARANDO ROB√î PARA TESTE DE QUADRIL (MODO AI)...")
        
        try:
            # Verificar se j√° est√° em modo AI
            if self.check_robot_state("ai"):
                print("‚úÖ Rob√¥ j√° est√° em modo AI - pronto para teste de quadril")
                return True
            
            # Se n√£o estiver em AI, preparar sequ√™ncia
            print("üîÑ Preparando rob√¥ para modo AI...")
            
            # Sequ√™ncia: Zero Torque ‚Üí Damping ‚Üí Get Ready
            print("1Ô∏è‚É£ Zero Torque (FSM 0)...")
            self.loco_client.SetFsmId(0)
            time.sleep(3)
            
            print("2Ô∏è‚É£ Damping (FSM 1)...")
            self.loco_client.SetFsmId(1)
            time.sleep(3)
            
            print("3Ô∏è‚É£ Get Ready (FSM 4)...")
            self.loco_client.SetFsmId(4)
            time.sleep(5)
            
            # Verificar estado
            if not self.check_robot_state("ai"):
                print("‚ö†Ô∏è  Rob√¥ n√£o est√° em modo AI")
                print("üéÆ Verifique se o rob√¥ est√° em AI Mode")
                input("‚è∏Ô∏è  Pressione ENTER ap√≥s colocar em AI Mode...")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na prepara√ß√£o: {e}")
            return False
    
    def test_hip_rotation_with_arm_actions(self):
        """Testa rota√ß√£o do quadril usando a√ß√µes de bra√ßo que movem o torso."""
        print("\nüîÑ TESTANDO ROTA√á√ÉO DO QUADRIL COM A√á√ïES DE BRA√áO...")
        
        if not self.check_robot_state("ai"):
            print("‚ùå Rob√¥ n√£o est√° em modo AI para teste de quadril")
            return False
        
        # A√ß√µes que podem mover o torso/quadril
        hip_actions = [
            (32, "Right Hand on Mouth - pode mover torso"),
            (33, "Right Hand on Heart - pode mover torso"),
            (31, "Extend Right Arm Forward - pode mover torso"),
            (23, "Right Hand Up - pode mover torso"),
            (15, "Both Hands Up - pode mover torso"),
            (34, "Both Hands Up Deviate Right - pode mover torso"),
        ]
        
        for action_id, description in hip_actions:
            print(f"\nüîÑ Testando: {description} (ID {action_id})...")
            
            if not self.check_robot_state("ai"):
                print(f"   ‚ùå Estado incorreto para {description}")
                continue
                
            try:
                # Executar a√ß√£o de bra√ßo
                result = self.arm_client.ExecuteAction(action_id)
                if result == 0:
                    print(f"   ‚úÖ {description} executado")
                    time.sleep(3)  # Aguardar movimento
                else:
                    print(f"   ‚ùå Erro na a√ß√£o {action_id}: {result}")
                
                # Relaxar bra√ßos
                self.arm_client.ExecuteAction(99)  # Release Arm
                time.sleep(2)
                
            except Exception as e:
                print(f"   ‚ùå Erro em {description}: {e}")
        
        return True
    
    def test_hip_balance_movements(self):
        """Testa movimentos de balanceamento que podem mover o quadril."""
        print("\nüîÑ TESTANDO MOVIMENTOS DE BALANCEAMENTO...")
        
        if not self.check_robot_state("ai"):
            print("‚ùå Rob√¥ n√£o est√° em modo AI para teste de quadril")
            return False
        
        # Testar diferentes poses que podem mover o quadril
        balance_tests = [
            ("Pose neutra", 0.0, 0.0, 0.0),
            ("Pose frente", 0.05, 0.0, 0.0),
            ("Pose tr√°s", -0.05, 0.0, 0.0),
            ("Pose esquerda", 0.0, 0.05, 0.0),
            ("Pose direita", 0.0, -0.05, 0.0),
        ]
        
        for name, vx, vy, vyaw in balance_tests:
            print(f"\nüîÑ {name}...")
            
            if not self.check_robot_state("ai"):
                print(f"   ‚ùå Estado incorreto para {name}")
                continue
                
            try:
                # Tentar movimento sutil (pode n√£o funcionar em AI mode)
                print(f"   üöÄ Tentando movimento sutil...")
                # Nota: Em AI mode, movimentos de locomo√ß√£o podem n√£o funcionar
                # mas vamos tentar para ver o comportamento
                
                print(f"   ‚úÖ {name} testado (pode n√£o ter movimento vis√≠vel)")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
        
        return True
    
    def test_hip_static_poses(self):
        """Testa poses est√°ticas que podem mover o quadril."""
        print("\nüîÑ TESTANDO POSES EST√ÅTICAS...")
        
        if not self.check_robot_state("ai"):
            print("‚ùå Rob√¥ n√£o est√° em modo AI para teste de quadril")
            return False
        
        # Testar diferentes estados FSM que podem mover o quadril
        fsm_poses = [
            (0, "Zero Torque"),
            (1, "Damping"),
            (2, "Squat"),
            (3, "Seat"),
            (4, "Get Ready"),
        ]
        
        for fsm_id, pose_name in fsm_poses:
            print(f"\nüîÑ Testando pose: {pose_name} (FSM {fsm_id})...")
            
            if not self.check_robot_state("ai"):
                print(f"   ‚ùå Estado incorreto para {pose_name}")
                continue
                
            try:
                # Mudar para pose FSM
                result = self.loco_client.SetFsmId(fsm_id)
                if result == 0:
                    print(f"   ‚úÖ {pose_name} ativado")
                    time.sleep(3)  # Aguardar transi√ß√£o
                else:
                    print(f"   ‚ùå Erro ao ativar {pose_name}: {result}")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {pose_name}: {e}")
        
        return True
    
    def test_hip_gesture_combinations(self):
        """Testa combina√ß√µes de gestos que podem mover o quadril."""
        print("\nüîÑ TESTANDO COMBINA√á√ïES DE GESTOS...")
        
        if not self.check_robot_state("ai"):
            print("‚ùå Rob√¥ n√£o est√° em modo AI para teste de quadril")
            return False
        
        # Sequ√™ncias de gestos que podem mover o torso/quadril
        gesture_sequences = [
            ([32, 99], "M√£o na boca + Relaxar"),
            ([33, 99], "M√£o no cora√ß√£o + Relaxar"),
            ([15, 99], "Duas m√£os para cima + Relaxar"),
            ([32, 33, 99], "M√£o na boca + M√£o no cora√ß√£o + Relaxar"),
        ]
        
        for sequence, description in gesture_sequences:
            print(f"\nüîÑ Sequ√™ncia: {description}...")
            
            if not self.check_robot_state("ai"):
                print(f"   ‚ùå Estado incorreto para {description}")
                continue
                
            try:
                for action_id in sequence:
                    result = self.arm_client.ExecuteAction(action_id)
                    if result == 0:
                        print(f"   ‚úÖ A√ß√£o {action_id} executada")
                        time.sleep(2)
                    else:
                        print(f"   ‚ùå Erro na a√ß√£o {action_id}: {result}")
                
                print(f"   ‚úÖ Sequ√™ncia {description} conclu√≠da")
                
            except Exception as e:
                print(f"   ‚ùå Erro na sequ√™ncia {description}: {e}")
        
        return True
    
    def run_all_hip_ai_tests(self):
        """Executa todos os testes de quadril no modo AI."""
        print("ü¶¥ TESTE DE MOVIMENTO DO QUADRIL - MODO AI")
        print("=" * 50)
        print("Este teste foca especificamente no movimento do quadril")
        print("no modo AI (sem locomo√ß√£o das pernas).")
        print("=" * 50)
        
        # Inicializar
        if not self.initialize_sdk():
            return False
        
        # Preparar rob√¥
        if not self.prepare_robot_for_hip_test():
            return False
        
        # Executar testes
        try:
            self.test_hip_rotation_with_arm_actions()
            self.test_hip_balance_movements()
            self.test_hip_static_poses()
            self.test_hip_gesture_combinations()
            
            print("\nüéâ TODOS OS TESTES DE QUADRIL (MODO AI) CONCLU√çDOS!")
            return True
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
            return False
        except Exception as e:
            print(f"\n‚ùå Erro geral nos testes: {e}")
            return False

def main():
    """Fun√ß√£o principal."""
    print("ü¶¥ TESTE DE MOVIMENTO DO QUADRIL (MODO AI) - UNITREE G1")
    print("=" * 60)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este teste testar√° movimentos do quadril!")
    print("‚ö†Ô∏è  Certifique-se de que h√° espa√ßo suficiente!")
    print("‚ö†Ô∏è  Pressione Ctrl+C para interromper a qualquer momento!")
    print("=" * 60)
    
    # Confirma√ß√£o do usu√°rio
    try:
        response = input("\nü§î Deseja continuar com o teste de quadril (modo AI)? (s/N): ").lower()
        if response not in ['s', 'sim', 'y', 'yes']:
            print("‚ùå Teste cancelado pelo usu√°rio")
            return
    except KeyboardInterrupt:
        print("\n‚ùå Teste cancelado")
        return
    
    # Executar teste
    tester = G1HipRotationAITest()
    success = tester.run_all_hip_ai_tests()
    
    if success:
        print("\nüéâ TESTE DE QUADRIL (MODO AI) CONCLU√çDO COM SUCESSO!")
        print("üìã Testes realizados:")
        print("   - Rota√ß√£o do quadril com a√ß√µes de bra√ßo")
        print("   - Movimentos de balanceamento")
        print("   - Poses est√°ticas FSM")
        print("   - Combina√ß√µes de gestos")
        print("")
        print("üéØ O quadril do G1 foi testado no modo AI!")
        print("üí° Observa√ß√£o: Movimentos podem ser sutis ou indiretos")
    else:
        print("\n‚ùå Teste falhou ou foi interrompido")

if __name__ == "__main__":
    main()
