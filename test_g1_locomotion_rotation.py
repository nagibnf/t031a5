#!/usr/bin/env python3
"""
Teste de Locomo√ß√£o e Rota√ß√£o do G1
==================================

Este teste explora as capacidades de movimento e rota√ß√£o do rob√¥ G1,
incluindo movimento do quadril e controle de velocidade.

Baseado na documenta√ß√£o descoberta:
- LocoClient.Move(vx, vy, vyaw) - Movimento com velocidade
- LocoClient.SetVelocity(vx, vy, omega, duration) - Controle de velocidade
- Articula√ß√µes do quadril: Pitch (¬±154¬∞), Roll (-30¬∞ a +170¬∞), Yaw (¬±158¬∞)
"""

import time
import sys
import numpy as np
from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.loco.g1_loco_client import LocoClient
from unitree_sdk2py.comm.motion_switcher.motion_switcher_client import MotionSwitcherClient

class G1LocomotionRotationTest:
    """Teste de locomo√ß√£o e rota√ß√£o do G1."""
    
    def __init__(self):
        self.interface = "en11"  # Interface de rede
        self.loco_client = None
        self.motion_switcher = None
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            print("‚úÖ SDK inicializado")
            
            # Inicializar LocoClient
            self.loco_client = LocoClient()
            self.loco_client.SetTimeout(10.0)
            self.loco_client.Init()
            print("‚úÖ LocoClient inicializado")
            
            # Inicializar MotionSwitcher
            self.motion_switcher = MotionSwitcherClient()
            self.motion_switcher.SetTimeout(10.0)
            self.motion_switcher.Init()
            print("‚úÖ MotionSwitcher inicializado")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def prepare_robot(self):
        """Prepara o rob√¥ para locomo√ß√£o."""
        print("\nüöÄ PREPARANDO ROB√î PARA LOCOMO√á√ÉO...")
        
        try:
            # Sequ√™ncia correta: Zero Torque ‚Üí Damping ‚Üí Get Ready
            print("1Ô∏è‚É£ Zero Torque (FSM 0)...")
            self.loco_client.SetFsmId(0)
            time.sleep(3)
            
            print("2Ô∏è‚É£ Damping (FSM 1)...")
            self.loco_client.SetFsmId(1)
            time.sleep(3)
            
            print("3Ô∏è‚É£ Get Ready (FSM 4)...")
            self.loco_client.SetFsmId(4)
            time.sleep(5)
            
            # Verificar estado
            status, result = self.motion_switcher.CheckMode()
            print(f"üìä Estado atual: {result}")
            
            # IMPORTANTE: Verificar se est√° em Main Operation Control
            print("\n‚ö†Ô∏è  ATEN√á√ÉO: AGORA VOC√ä PRECISA COLOCAR O ROB√î EM MAIN OPERATION CONTROL!")
            print("üéÆ No controle f√≠sico, pressione: R1 + X")
            print("ü§ñ Isso far√° o rob√¥ entrar automaticamente em Lowstanding")
            print("üìã Aguarde o rob√¥ ficar est√°vel antes de continuar...")
            
            # Aguardar confirma√ß√£o do usu√°rio
            input("\n‚è∏Ô∏è  Pressione ENTER ap√≥s colocar em Main Operation Control...")
            
            # Verificar estado novamente
            status, result = self.motion_switcher.CheckMode()
            print(f"üìä Estado ap√≥s Main Operation Control: {result}")
            
            if result and result.get('name') == 'control':
                print("‚úÖ Rob√¥ est√° em Main Operation Control - pronto para locomo√ß√£o!")
                return True
            else:
                print("‚ö†Ô∏è  Rob√¥ pode n√£o estar em Main Operation Control, mas continuando...")
                print("‚ö†Ô∏è  Se os comandos falharem, verifique o modo do rob√¥")
                return True
                
        except Exception as e:
            print(f"‚ùå Erro na prepara√ß√£o: {e}")
            return False
    
    def check_robot_state(self, expected_mode="control"):
        """Verifica o estado atual do rob√¥."""
        try:
            status, result = self.motion_switcher.CheckMode()
            if status == 0 and result:
                current_mode = result.get('name', 'unknown')
                current_form = result.get('form', 'unknown')
                print(f"üìä Estado atual: {result}")
                
                if current_mode == expected_mode:
                    print(f"‚úÖ Rob√¥ est√° no modo correto: {current_mode}")
                    return True
                else:
                    print(f"‚ö†Ô∏è  Rob√¥ est√° em modo {current_mode}, esperado: {expected_mode}")
                    return False
            else:
                print(f"‚ùå Erro ao verificar estado: {status}, {result}")
                return False
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o de estado: {e}")
            return False

    def test_velocity_movements(self):
        """Testa movimentos b√°sicos com velocidade."""
        print("\nüèÉ TESTANDO MOVIMENTOS DE VELOCIDADE...")
        
        movements = [
            ("Andar para frente", 0.2, 0.0, 0.0),
            ("Andar para tr√°s", -0.2, 0.0, 0.0),
            ("Lateral esquerda", 0.0, 0.2, 0.0),
            ("Lateral direita", 0.0, -0.2, 0.0),
            ("Rota√ß√£o esquerda", 0.0, 0.0, 0.5),
            ("Rota√ß√£o direita", 0.0, 0.0, -0.5),
        ]
        
        for name, vx, vy, vyaw in movements:
            print(f"\nüîÑ {name} (vx={vx}, vy={vy}, vyaw={vyaw})...")
            
            # SEMPRE verificar estado antes de executar
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Rob√¥ n√£o est√° em modo correto para {name}")
                continue
                
            try:
                # Usar Move() para movimento cont√≠nuo
                self.loco_client.Move(vx, vy, vyaw, continous_move=True)
                time.sleep(3)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado com sucesso")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
    
    def test_rotation_patterns(self):
        """Testa padr√µes de rota√ß√£o mais complexos."""
        print("\nüåÄ TESTANDO PADR√ïES DE ROTA√á√ÉO...")
        
        rotations = [
            ("Rota√ß√£o lenta", 0.0, 0.0, 0.2, 5.0),
            ("Rota√ß√£o m√©dia", 0.0, 0.0, 0.5, 3.0),
            ("Rota√ß√£o r√°pida", 0.0, 0.0, 1.0, 2.0),
            ("Rota√ß√£o + avan√ßo", 0.1, 0.0, 0.3, 4.0),
            ("Rota√ß√£o + lateral", 0.0, 0.1, 0.3, 4.0),
        ]
        
        for name, vx, vy, vyaw, duration in rotations:
            print(f"\nüîÑ {name} (vx={vx}, vy={vy}, vyaw={vyaw}, {duration}s)...")
            
            # SEMPRE verificar estado antes de executar
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Rob√¥ n√£o est√° em modo correto para {name}")
                continue
                
            try:
                # Usar SetVelocity() para controle preciso
                self.loco_client.SetVelocity(vx, vy, vyaw, duration)
                time.sleep(duration + 1)
                
                # Parar movimento
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado com sucesso")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
    
    def test_circular_motion(self):
        """Testa movimento circular."""
        print("\n‚≠ï TESTANDO MOVIMENTO CIRCULAR...")
        
        # SEMPRE verificar estado antes de executar
        if not self.check_robot_state("control"):
            print("   ‚ùå Rob√¥ n√£o est√° em modo correto para movimento circular")
            return
            
        try:
            # Movimento circular: avan√ßo + rota√ß√£o constante
            print("üîÑ Iniciando movimento circular...")
            self.loco_client.SetVelocity(0.1, 0.0, 0.4, 10.0)  # 10 segundos
            time.sleep(10)
            
            # Parar movimento
            self.loco_client.StopMove()
            time.sleep(2)
            
            print("   ‚úÖ Movimento circular executado")
            
        except Exception as e:
            print(f"   ‚ùå Erro no movimento circular: {e}")
    
    def test_figure_eight(self):
        """Testa movimento em forma de 8."""
        print("\n8Ô∏è‚É£ TESTANDO MOVIMENTO EM FORMA DE 8...")
        
        # SEMPRE verificar estado antes de executar
        if not self.check_robot_state("control"):
            print("   ‚ùå Rob√¥ n√£o est√° em modo correto para movimento em 8")
            return
            
        try:
            # Primeira curva
            print("üîÑ Primeira curva...")
            self.loco_client.SetVelocity(0.1, 0.0, 0.5, 3.0)
            time.sleep(3)
            
            # Transi√ß√£o
            print("üîÑ Transi√ß√£o...")
            self.loco_client.SetVelocity(0.1, 0.0, 0.0, 1.0)
            time.sleep(1)
            
            # Segunda curva (dire√ß√£o oposta)
            print("üîÑ Segunda curva...")
            self.loco_client.SetVelocity(0.1, 0.0, -0.5, 3.0)
            time.sleep(3)
            
            # Parar movimento
            self.loco_client.StopMove()
            time.sleep(2)
            
            print("   ‚úÖ Movimento em 8 executado")
            
        except Exception as e:
            print(f"   ‚ùå Erro no movimento em 8: {e}")
    
    def test_hip_rotation_limits(self):
        """Testa os limites de rota√ß√£o do quadril (modo est√°tico)."""
        print("\nü¶¥ TESTANDO LIMITES DE ROTA√á√ÉO DO QUADRIL...")
        
        # Nota: Este teste requer modo de controle de baixo n√≠vel
        # Por enquanto, vamos simular com movimentos de rota√ß√£o
        
        rotations = [
            ("Rota√ß√£o Yaw m√°xima +", 0.0, 0.0, 1.5),
            ("Rota√ß√£o Yaw m√°xima -", 0.0, 0.0, -1.5),
            ("Rota√ß√£o suave", 0.0, 0.0, 0.8),
        ]
        
        for name, vx, vy, vyaw in rotations:
            print(f"\nüîÑ {name} (vyaw={vyaw})...")
            
            # SEMPRE verificar estado antes de executar
            if not self.check_robot_state("control"):
                print(f"   ‚ùå Rob√¥ n√£o est√° em modo correto para {name}")
                continue
                
            try:
                self.loco_client.SetVelocity(vx, vy, vyaw, 2.0)
                time.sleep(2)
                
                self.loco_client.StopMove()
                time.sleep(2)
                
                print(f"   ‚úÖ {name} executado")
                
            except Exception as e:
                print(f"   ‚ùå Erro em {name}: {e}")
    
    def test_balance_modes(self):
        """Testa diferentes modos de balanceamento."""
        print("\n‚öñÔ∏è TESTANDO MODOS DE BALANCEAMENTO...")
        
        # SEMPRE verificar estado antes de executar
        if not self.check_robot_state("control"):
            print("   ‚ùå Rob√¥ n√£o est√° em modo correto para testes de balanceamento")
            return
            
        try:
            # BalanceStand com diferentes modos
            balance_modes = [0, 1, 2]  # Diferentes modos de balanceamento
            
            for mode in balance_modes:
                print(f"üîÑ Testando modo de balanceamento {mode}...")
                
                # Verificar estado antes de cada modo
                if not self.check_robot_state("control"):
                    print(f"   ‚ùå Rob√¥ n√£o est√° em modo correto para modo {mode}")
                    continue
                    
                try:
                    self.loco_client.BalanceStand(mode)
                    time.sleep(3)
                    print(f"   ‚úÖ Modo {mode} ativado")
                except Exception as e:
                    print(f"   ‚ùå Erro no modo {mode}: {e}")
                    
        except Exception as e:
            print(f"‚ùå Erro nos testes de balanceamento: {e}")
    
    def run_all_tests(self):
        """Executa todos os testes."""
        print("ü§ñ TESTE DE LOCOMO√á√ÉO E ROTA√á√ÉO DO G1")
        print("=" * 50)
        
        # Inicializar
        if not self.initialize_sdk():
            return False
        
        # Preparar rob√¥
        if not self.prepare_robot():
            return False
        
        # Executar testes
        try:
            self.test_velocity_movements()
            self.test_rotation_patterns()
            self.test_circular_motion()
            self.test_figure_eight()
            self.test_hip_rotation_limits()
            self.test_balance_modes()
            
            print("\nüéâ TODOS OS TESTES DE LOCOMO√á√ÉO CONCLU√çDOS!")
            return True
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
            self.loco_client.StopMove()
            return False
        except Exception as e:
            print(f"\n‚ùå Erro geral nos testes: {e}")
            return False

def main():
    """Fun√ß√£o principal."""
    print("ü§ñ TESTE DE LOCOMO√á√ÉO E ROTA√á√ÉO DO UNITREE G1")
    print("=" * 60)
    print("‚ö†Ô∏è  ATEN√á√ÉO: Este teste mover√° o rob√¥!")
    print("‚ö†Ô∏è  Certifique-se de que h√° espa√ßo suficiente!")
    print("‚ö†Ô∏è  Pressione Ctrl+C para interromper a qualquer momento!")
    print("=" * 60)
    
    # Confirma√ß√£o do usu√°rio
    try:
        response = input("\nü§î Deseja continuar com o teste? (s/N): ").lower()
        if response not in ['s', 'sim', 'y', 'yes']:
            print("‚ùå Teste cancelado pelo usu√°rio")
            return
    except KeyboardInterrupt:
        print("\n‚ùå Teste cancelado")
        return
    
    # Executar teste
    tester = G1LocomotionRotationTest()
    success = tester.run_all_tests()
    
    if success:
        print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
        print("üìã Comandos testados:")
        print("   - LocoClient.Move(vx, vy, vyaw)")
        print("   - LocoClient.SetVelocity(vx, vy, omega, duration)")
        print("   - LocoClient.StopMove()")
        print("   - LocoClient.BalanceStand(mode)")
        print("   - Movimentos: frente, tr√°s, lateral, rota√ß√£o")
        print("   - Padr√µes: circular, figura 8, limites de rota√ß√£o")
    else:
        print("\n‚ùå Teste falhou ou foi interrompido")

if __name__ == "__main__":
    main()
