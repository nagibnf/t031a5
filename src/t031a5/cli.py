"""
CLI principal do sistema t031a5.

Interface de linha de comando para executar o sistema G1.
"""

import asyncio
import logging
import sys
from pathlib import Path
from typing import Optional

import typer
from rich.console import Console
from rich.logging import RichHandler
from rich.progress import Progress, SpinnerColumn, TextColumn

from .runtime import CortexRuntime

# Configura√ß√£o do CLI
app = typer.Typer(
    name="t031a5",
    help="Sistema AI Multimodal para G1 - Sistema de IA multimodal para o rob√¥ human√≥ide G1 da Unitree",
    add_completion=False,
)

console = Console()


def setup_logging(level: str = "INFO", rich_output: bool = True):
    """Configura o sistema de logging."""
    log_level = getattr(logging, level.upper())
    
    if rich_output:
        # Usa Rich para logging colorido
        logging.basicConfig(
            level=log_level,
            format="%(message)s",
            datefmt="[%X]",
            handlers=[RichHandler(console=console, rich_tracebacks=True)]
        )
    else:
        # Logging padr√£o
        logging.basicConfig(
            level=log_level,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )


@app.command()
def run(
    config: Path = typer.Option(
        None,
        "--config", "-c",
        help="Caminho para o arquivo de configura√ß√£o JSON5",
        exists=True,
        file_okay=True,
        dir_okay=False,
    ),
    dev: bool = typer.Option(
        False,
        "--dev",
        help="Modo de desenvolvimento com logs detalhados",
    ),
    log_level: str = typer.Option(
        "INFO",
        "--log-level",
        help="N√≠vel de logging (DEBUG, INFO, WARNING, ERROR)",
    ),
    no_rich: bool = typer.Option(
        False,
        "--no-rich",
        help="Desabilita sa√≠da colorida do Rich",
    ),
):
    """
    Executa o sistema t031a5.
    
    Exemplos:
        t031a5 run --config config/g1_basic.json5
        t031a5 run --config config/g1_advanced.json5 --dev
        t031a5 run --config config/g1_development.json5 --log-level DEBUG
    """
    
    # Configura logging
    if dev:
        log_level = "DEBUG"
    
    setup_logging(log_level, not no_rich)
    logger = logging.getLogger(__name__)
    
    # Determina arquivo de configura√ß√£o
    if config is None:
        # Procura por configura√ß√µes padr√£o
        config_candidates = [
            Path("config/local.json5"),
            Path("config/g1_basic.json5"),
            Path("config/g1_development.json5"),
        ]
        
        for candidate in config_candidates:
            if candidate.exists():
                config = candidate
                logger.info(f"Usando configura√ß√£o padr√£o: {config}")
                break
        else:
            console.print("[red]Erro: Nenhum arquivo de configura√ß√£o encontrado![/red]")
            console.print("Use --config para especificar um arquivo ou crie config/local.json5")
            sys.exit(1)
    
    # Valida arquivo de configura√ß√£o
    if not config.exists():
        console.print(f"[red]Erro: Arquivo de configura√ß√£o n√£o encontrado: {config}[/red]")
        sys.exit(1)
    
    # Executa o sistema
    asyncio.run(_run_system(config, dev))


async def _run_system(config_path: Path, dev_mode: bool):
    """Executa o sistema principal."""
    logger = logging.getLogger(__name__)
    
    console.print(f"[green]üöÄ Iniciando t031a5 com configura√ß√£o: {config_path}[/green]")
    
    # Cria runtime
    runtime = CortexRuntime(config_path)
    
    try:
        # Inicializa sistema
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Inicializando sistema...", total=None)
            
            success = await runtime.initialize()
            
            if not success:
                console.print("[red]‚ùå Falha na inicializa√ß√£o do sistema[/red]")
                sys.exit(1)
            
            progress.update(task, description="Sistema inicializado com sucesso!")
        
        console.print("[green]‚úÖ Sistema inicializado com sucesso![/green]")
        
        # Mostra informa√ß√µes do sistema
        status = await runtime.get_status()
        console.print(f"[blue]üìä Status do sistema:[/blue]")
        console.print(f"  - Configura√ß√£o carregada: {'‚úÖ' if status['config_loaded'] else '‚ùå'}")
        console.print(f"  - Componentes inicializados: {'‚úÖ' if status['components_initialized'] else '‚ùå'}")
        console.print(f"  - Modo desenvolvimento: {'‚úÖ' if dev_mode else '‚ùå'}")
        
        # Status do G1Controller se dispon√≠vel
        if status.get('g1_controller'):
            g1_status = status['g1_controller']
            if isinstance(g1_status, dict) and not g1_status.get('error'):
                console.print(f"  - G1Controller: {'‚úÖ' if g1_status.get('controller', {}).get('initialized') else '‚ùå'}")
            else:
                console.print(f"  - G1Controller: ‚ùå")
        else:
            console.print(f"  - G1Controller: ‚ö™ N√£o configurado")
        
        # Status do WebSim se dispon√≠vel
        if status.get('websim'):
            websim_status = status['websim']
            if isinstance(websim_status, dict) and not websim_status.get('error'):
                console.print(f"  - WebSim: {'‚úÖ' if websim_status.get('running') else '‚ùå'}")
                if websim_status.get('running'):
                    console.print(f"    URL: http://{websim_status.get('host', 'localhost')}:{websim_status.get('port', 8080)}")
            else:
                console.print(f"  - WebSim: ‚ùå")
        else:
            console.print(f"  - WebSim: ‚ö™ N√£o configurado")
        
        # Inicia loop principal
        console.print("[yellow]üîÑ Iniciando loop principal...[/yellow]")
        console.print("[yellow]Pressione Ctrl+C para parar[/yellow]")
        
        await runtime.start()
        
    except KeyboardInterrupt:
        console.print("\n[yellow]‚ö†Ô∏è  Interrup√ß√£o recebida, parando sistema...[/yellow]")
    except Exception as e:
        console.print(f"[red]‚ùå Erro fatal: {e}[/red]")
        logger.exception("Erro fatal no sistema")
        sys.exit(1)
    finally:
        console.print("[green]‚úÖ Sistema finalizado[/green]")


@app.command()
def status(
    config: Optional[Path] = typer.Option(
        None,
        "--config", "-c",
        help="Caminho para o arquivo de configura√ß√£o",
        exists=True,
        file_okay=True,
        dir_okay=False,
    ),
):
    """
    Mostra o status da configura√ß√£o do sistema.
    
    Exemplos:
        t031a5 status
        t031a5 status --config config/g1_advanced.json5
    """
    
    setup_logging("INFO", True)
    logger = logging.getLogger(__name__)
    
    # Determina arquivo de configura√ß√£o
    if config is None:
        config_candidates = [
            Path("config/local.json5"),
            Path("config/g1_basic.json5"),
            Path("config/g1_development.json5"),
        ]
        
        for candidate in config_candidates:
            if candidate.exists():
                config = candidate
                break
        else:
            console.print("[red]Erro: Nenhum arquivo de configura√ß√£o encontrado![/red]")
            sys.exit(1)
    
    # Carrega e mostra configura√ß√£o
    try:
        from .runtime.config import ConfigManager
        
        config_manager = ConfigManager(config)
        g1_config = config_manager.load_config()
        
        console.print(f"[blue]üìã Status da configura√ß√£o: {config}[/blue]")
        console.print(f"  - Nome: {g1_config.name}")
        console.print(f"  - Frequ√™ncia: {g1_config.hertz} Hz")
        console.print(f"  - Interface de rede: {g1_config.unitree_ethernet}")
        
        # Inputs configurados
        inputs_config = config_manager.get_inputs_config()
        console.print(f"  - Inputs configurados: {len(inputs_config)}")
        for input_config in inputs_config:
            console.print(f"    ‚Ä¢ {input_config.get('type', 'Unknown')}")
        
        # Actions configuradas
        actions_config = config_manager.get_actions_config()
        console.print(f"  - Actions configuradas: {len(actions_config)}")
        for action_config in actions_config:
            console.print(f"    ‚Ä¢ {action_config.get('name', 'Unknown')}")
        
        # Configura√ß√µes de desenvolvimento
        dev_config = g1_config.development
        console.print(f"  - Modo debug: {'‚úÖ' if dev_config.get('debug_mode') else '‚ùå'}")
        console.print(f"  - WebSim habilitado: {'‚úÖ' if dev_config.get('websim_enabled') else '‚ùå'}")
        console.print(f"  - Hot reload: {'‚úÖ' if dev_config.get('hot_reload') else '‚ùå'}")
        
        # Valida√ß√£o do ambiente
        if config_manager.validate_environment():
            console.print("  - Ambiente: [green]‚úÖ V√°lido[/green]")
        else:
            console.print("  - Ambiente: [red]‚ùå Inv√°lido[/red]")
        
    except Exception as e:
        console.print(f"[red]Erro ao carregar configura√ß√£o: {e}[/red]")
        sys.exit(1)


@app.command()
def validate(
    config: Path = typer.Option(
        ...,
        "--config", "-c",
        help="Caminho para o arquivo de configura√ß√£o",
        exists=True,
        file_okay=True,
        dir_okay=False,
    ),
):
    """
    Valida um arquivo de configura√ß√£o.
    
    Exemplos:
        t031a5 validate --config config/g1_basic.json5
        t031a5 validate --config config/g1_advanced.json5
    """
    
    setup_logging("INFO", True)
    
    try:
        from .runtime.config import ConfigManager
        
        console.print(f"[blue]üîç Validando configura√ß√£o: {config}[/blue]")
        
        config_manager = ConfigManager(config)
        g1_config = config_manager.load_config()
        
        console.print("[green]‚úÖ Configura√ß√£o v√°lida![/green]")
        console.print(f"  - Nome: {g1_config.name}")
        console.print(f"  - Frequ√™ncia: {g1_config.hertz} Hz")
        
        # Valida√ß√£o do ambiente
        if config_manager.validate_environment():
            console.print("[green]‚úÖ Ambiente v√°lido![/green]")
        else:
            console.print("[yellow]‚ö†Ô∏è  Ambiente com problemas[/yellow]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Configura√ß√£o inv√°lida: {e}[/red]")
        sys.exit(1)


@app.command()
def test(
    config: Path = typer.Option(
        None,
        "--config", "-c",
        help="Caminho para o arquivo de configura√ß√£o JSON5",
        exists=True,
        file_okay=True,
        dir_okay=False,
    ),
    duration: int = typer.Option(
        10,
        "--duration", "-d",
        help="Dura√ß√£o do teste em segundos",
        min=1,
        max=300,
    ),
):
    """
    Testa o sistema t031a5 por um per√≠odo espec√≠fico.
    
    Exemplos:
        t031a5 test --config config/g1_integrated.json5
        t031a5 test --config config/g1_basic.json5 --duration 30
    """
    
    setup_logging("INFO", True)
    logger = logging.getLogger(__name__)
    
    # Determina arquivo de configura√ß√£o
    if config is None:
        config_candidates = [
            Path("config/g1_integrated.json5"),
            Path("config/g1_basic.json5"),
            Path("config/g1_development.json5"),
        ]
        
        for candidate in config_candidates:
            if candidate.exists():
                config = candidate
                logger.info(f"Usando configura√ß√£o padr√£o: {config}")
                break
        else:
            console.print("[red]Erro: Nenhum arquivo de configura√ß√£o encontrado![/red]")
            sys.exit(1)
    
    # Executa o teste
    asyncio.run(_test_system(config, duration))


async def _test_system(config_path: Path, duration: int):
    """Executa teste do sistema."""
    logger = logging.getLogger(__name__)
    
    console.print(f"[green]üß™ Testando t031a5 por {duration} segundos...[/green]")
    console.print(f"[blue]Configura√ß√£o: {config_path}[/blue]")
    
    # Cria runtime
    runtime = CortexRuntime(config_path)
    
    try:
        # Inicializa sistema
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console,
        ) as progress:
            task = progress.add_task("Inicializando sistema...", total=None)
            
            success = await runtime.initialize()
            
            if not success:
                console.print("[red]‚ùå Falha na inicializa√ß√£o do sistema[/red]")
                sys.exit(1)
            
            progress.update(task, description="Sistema inicializado com sucesso!")
        
        console.print("[green]‚úÖ Sistema inicializado com sucesso![/green]")
        
        # Mostra status inicial
        status = await runtime.get_status()
        console.print(f"[blue]üìä Status inicial:[/blue]")
        console.print(f"  - Componentes inicializados: {'‚úÖ' if status['components_initialized'] else '‚ùå'}")
        
        # Inicia loop em background
        console.print(f"[yellow]üîÑ Executando teste por {duration} segundos...[/yellow]")
        
        # Inicia o runtime em uma task separada
        run_task = asyncio.create_task(runtime.start())
        
        # Aguarda o tempo especificado
        await asyncio.sleep(duration)
        
        # Para o sistema
        runtime.is_running = False
        await run_task
        
        # Mostra estat√≠sticas finais
        final_status = await runtime.get_status()
        console.print(f"[blue]üìä Estat√≠sticas finais:[/blue]")
        console.print(f"  - Loops executados: {final_status['loop_count']}")
        console.print(f"  - Tempo m√©dio por loop: {final_status['metrics']['avg_loop_time']*1000:.2f}ms")
        console.print(f"  - Erros: {final_status['metrics']['errors']}")
        console.print(f"  - Frequ√™ncia m√©dia: {final_status['loop_count']/duration:.2f} Hz")
        
        if final_status['metrics']['errors'] == 0:
            console.print("[green]‚úÖ Teste conclu√≠do com sucesso![/green]")
        else:
            console.print(f"[yellow]‚ö†Ô∏è  Teste conclu√≠do com {final_status['metrics']['errors']} erros[/yellow]")
        
    except Exception as e:
        console.print(f"[red]‚ùå Erro durante o teste: {e}[/red]")
        logger.exception("Erro durante o teste")
        sys.exit(1)
    finally:
        console.print("[green]‚úÖ Teste finalizado[/green]")


@app.command()
def version():
    """Mostra a vers√£o do sistema."""
    from . import __version__
    console.print(f"[blue]t031a5 vers√£o {__version__}[/blue]")


def main():
    """Fun√ß√£o principal do CLI."""
    app()


if __name__ == "__main__":
    main()
