"""
Gerenciador de c√¢mera para captura de imagens em tempo real.
"""

import cv2
import numpy as np
import logging
import os
import time
import fcntl
import atexit
import signal
import subprocess
from typing import Optional, Tuple
from pathlib import Path

logger = logging.getLogger(__name__)

class CameraManager:
    def __init__(self, camera_id: int = 0):
        """
        Inicializa o gerenciador de c√¢mera.
        
        Args:
            camera_id: ID da c√¢mera (0 = c√¢mera padr√£o)
        """
        self.camera_id = camera_id
        self.cap = None
        self.is_initialized = False
        self.lock_file = None
        self.lock_path = f"/tmp/camera_{camera_id}.lock"
        
        # Registrar cleanup autom√°tico
        atexit.register(self._emergency_cleanup)
        signal.signal(signal.SIGTERM, self._signal_cleanup)
        signal.signal(signal.SIGINT, self._signal_cleanup)
        
    async def initialize(self) -> bool:
        """Inicializa a c√¢mera."""
        try:
            logger.info(f"üì∑ Inicializando c√¢mera (ID: {self.camera_id})...")
            
            # 1. Verificar e limpar processos conflitantes
            if not self._check_and_cleanup_conflicts():
                logger.warning("‚ö†Ô∏è Conflitos detectados, tentando resolever...")
                
            # 2. Tentar adquirir lock da c√¢mera
            if not self._acquire_camera_lock():
                logger.error("‚ùå N√£o foi poss√≠vel adquirir lock da c√¢mera")
                return False
            
            # 3. Tentar diferentes m√©todos de inicializa√ß√£o
            methods = [
                # M√©todo 1: MJPG com backend V4L2
                lambda: self._init_mjpg_v4l2(),
                # M√©todo 2: GStreamer pipeline
                lambda: self._init_gstreamer(),
                # M√©todo 3: OpenCV padr√£o
                lambda: self._init_default()
            ]
            
            for i, method in enumerate(methods, 1):
                logger.info(f"üîç Tentativa {i}: {method.__name__}")
                if method():
                    self.is_initialized = True
                    logger.info("‚úÖ C√¢mera inicializada com sucesso")
                    return True
            
            logger.error("‚ùå Todos os m√©todos de inicializa√ß√£o falharam")
            self._release_camera_lock()
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar c√¢mera: {e}")
            self._release_camera_lock()
            return False
    
    def _init_mjpg_v4l2(self) -> bool:
        """Inicializa com MJPG e backend V4L2."""
        try:
            self.cap = cv2.VideoCapture(self.camera_id, cv2.CAP_V4L2)
            
            if not self.cap.isOpened():
                return False
            
            # Configurar MJPG
            self.cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc('M','J','P','G'))
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            self.cap.set(cv2.CAP_PROP_FPS, 30)
            
            # Teste de captura
            ret, frame = self.cap.read()
            if ret and frame is not None:
                logger.info("‚úÖ MJPG V4L2 funcionando")
                return True
                
        except Exception as e:
            logger.debug(f"MJPG V4L2 falhou: {e}")
        
        return False
    
    def _init_gstreamer(self) -> bool:
        """Inicializa com pipeline GStreamer."""
        try:
            pipeline = f"v4l2src device=/dev/video{self.camera_id} ! image/jpeg,width=640,height=480,framerate=30/1 ! jpegdec ! videoconvert ! appsink"
            self.cap = cv2.VideoCapture(pipeline, cv2.CAP_GSTREAMER)
            
            if not self.cap.isOpened():
                return False
            
            # Teste de captura
            ret, frame = self.cap.read()
            if ret and frame is not None:
                logger.info("‚úÖ GStreamer funcionando")
                return True
                
        except Exception as e:
            logger.debug(f"GStreamer falhou: {e}")
        
        return False
    
    def _init_default(self) -> bool:
        """Inicializa com m√©todo padr√£o OpenCV."""
        try:
            self.cap = cv2.VideoCapture(self.camera_id)
            
            if not self.cap.isOpened():
                return False
            
            # Configura√ß√µes b√°sicas
            self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
            self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
            
            # Teste de captura
            ret, frame = self.cap.read()
            if ret and frame is not None:
                logger.info("‚úÖ M√©todo padr√£o funcionando")
                return True
                
        except Exception as e:
            logger.debug(f"M√©todo padr√£o falhou: {e}")
        
        return False
    
    async def capture_image(self) -> Optional[np.ndarray]:
        """Captura uma imagem da c√¢mera."""
        if not self.is_initialized or not self.cap:
            logger.warning("‚ùå C√¢mera n√£o inicializada")
            return None
        
        try:
            ret, frame = self.cap.read()
            if not ret:
                logger.error("‚ùå Falha na captura de imagem")
                return None
            
            # Converte BGR para RGB
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            return frame_rgb
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao capturar imagem: {e}")
            return None
    
    async def save_image(self, image: np.ndarray, filename: str = "capture.jpg") -> bool:
        """Salva uma imagem em disco."""
        try:
            # Converte RGB para BGR para salvar
            image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
            
            # Cria diret√≥rio se n√£o existir
            save_dir = Path("captures")
            save_dir.mkdir(exist_ok=True)
            
            save_path = save_dir / filename
            success = cv2.imwrite(str(save_path), image_bgr)
            
            if success:
                logger.info(f"‚úÖ Imagem salva: {save_path}")
                return True
            else:
                logger.error(f"‚ùå Falha ao salvar imagem: {save_path}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao salvar imagem: {e}")
            return False
    
    async def get_camera_info(self) -> dict:
        """Retorna informa√ß√µes da c√¢mera."""
        if not self.is_initialized or not self.cap:
            return {"error": "C√¢mera n√£o inicializada"}
        
        try:
            width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
            height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
            fps = self.cap.get(cv2.CAP_PROP_FPS)
            
            return {
                "camera_id": self.camera_id,
                "width": width,
                "height": height,
                "fps": fps,
                "is_initialized": self.is_initialized
            }
        except Exception as e:
            return {"error": str(e)}
    
    async def cleanup(self):
        """Limpa recursos da c√¢mera."""
        try:
            if self.cap:
                self.cap.release()
                logger.info("‚úÖ C√¢mera liberada")
            
            self._release_camera_lock()
            self.is_initialized = False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar c√¢mera: {e}")
    
    def _check_and_cleanup_conflicts(self) -> bool:
        """Verifica e limpa processos conflitantes usando a c√¢mera."""
        try:
            device_path = f"/dev/video{self.camera_id}"
            
            # Verificar se dispositivo existe
            if not os.path.exists(device_path):
                logger.error(f"‚ùå Dispositivo {device_path} n√£o existe")
                return False
            
            # Verificar processos usando a c√¢mera
            try:
                result = subprocess.run(
                    ["lsof", device_path], 
                    capture_output=True, 
                    text=True, 
                    timeout=5
                )
                
                if result.returncode == 0 and result.stdout.strip():
                    logger.warning(f"‚ö†Ô∏è Processos usando {device_path}:")
                    lines = result.stdout.strip().split('\n')[1:]  # Skip header
                    
                    for line in lines:
                        if line.strip():
                            parts = line.split()
                            if len(parts) >= 2:
                                command = parts[0]
                                pid = parts[1]
                                logger.warning(f"  üìã {command} (PID: {pid})")
                                
                                # Tentar finalizar processo educadamente
                                try:
                                    os.kill(int(pid), signal.SIGTERM)
                                    time.sleep(2)
                                    logger.info(f"  ‚úÖ Processo {pid} finalizado")
                                except (ProcessLookupError, ValueError):
                                    logger.debug(f"  ‚ÑπÔ∏è Processo {pid} j√° finalizado")
                                except PermissionError:
                                    logger.warning(f"  ‚ö†Ô∏è Sem permiss√£o para finalizar {pid}")
                
            except (subprocess.TimeoutExpired, FileNotFoundError):
                logger.debug("üîç lsof n√£o dispon√≠vel ou timeout")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar conflitos: {e}")
            return False
    
    def _acquire_camera_lock(self) -> bool:
        """Adquire lock exclusivo da c√¢mera."""
        try:
            # Remover lock antigo se existir e estiver √≥rf√£o
            if os.path.exists(self.lock_path):
                try:
                    with open(self.lock_path, 'r') as f:
                        old_pid = int(f.read().strip())
                    
                    # Verificar se processo ainda existe
                    try:
                        os.kill(old_pid, 0)  # N√£o mata, s√≥ verifica
                        logger.warning(f"‚ö†Ô∏è C√¢mera j√° em uso pelo processo {old_pid}")
                        return False
                    except ProcessLookupError:
                        # Processo morto, remover lock √≥rf√£o
                        os.remove(self.lock_path)
                        logger.info("üßπ Lock √≥rf√£o removido")
                        
                except (ValueError, FileNotFoundError):
                    # Lock inv√°lido, remover
                    os.remove(self.lock_path)
            
            # Criar novo lock
            self.lock_file = open(self.lock_path, 'w')
            fcntl.flock(self.lock_file.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
            self.lock_file.write(str(os.getpid()))
            self.lock_file.flush()
            
            logger.info(f"üîí Lock da c√¢mera {self.camera_id} adquirido")
            return True
            
        except (BlockingIOError, OSError):
            logger.error("‚ùå C√¢mera j√° est√° sendo usada por outro processo")
            return False
        except Exception as e:
            logger.error(f"‚ùå Erro ao adquirir lock: {e}")
            return False
    
    def _release_camera_lock(self):
        """Libera lock da c√¢mera."""
        try:
            if self.lock_file:
                fcntl.flock(self.lock_file.fileno(), fcntl.LOCK_UN)
                self.lock_file.close()
                self.lock_file = None
            
            if os.path.exists(self.lock_path):
                os.remove(self.lock_path)
                logger.info(f"üîì Lock da c√¢mera {self.camera_id} liberado")
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao liberar lock: {e}")
    
    def _emergency_cleanup(self):
        """Cleanup de emerg√™ncia chamado pelo atexit."""
        try:
            if self.cap:
                self.cap.release()
            self._release_camera_lock()
        except:
            pass  # Silencioso em cleanup de emerg√™ncia
    
    def _signal_cleanup(self, signum, frame):
        """Cleanup chamado por sinais."""
        logger.info(f"üì° Sinal {signum} recebido, limpando c√¢mera...")
        self._emergency_cleanup()
        exit(0)

# Fun√ß√£o de conveni√™ncia para captura r√°pida
async def quick_capture(camera_id: int = 0) -> Optional[np.ndarray]:
    """Captura r√°pida de uma imagem."""
    camera = CameraManager(camera_id)
    
    if await camera.initialize():
        image = await camera.capture_image()
        await camera.cleanup()
        return image
    
    return None
