#!/usr/bin/env python3
"""
Gerenciador de √Åudio Nativo - Sistema t031a5

Usa o sistema de √°udio nativo do Mac para reproduzir MP3 do ElevenLabs
"""

import asyncio
import logging
import os
import tempfile
import subprocess
from typing import Optional, Dict, Any
from pathlib import Path

logger = logging.getLogger(__name__)


class NativeAudioManager:
    """Gerenciador de √°udio nativo para t031a5."""
    
    def __init__(self, config_path: str = "config/g1_native_audio.json5"):
        self.config_path = Path(config_path)
        self.config = self.load_config()
        self.is_initialized = False
        
    def load_config(self) -> Dict[str, Any]:
        """Carrega configura√ß√£o de √°udio."""
        try:
            import json5
            with open(self.config_path, 'r') as f:
                return json5.load(f)
        except ImportError:
            import json
            with open(self.config_path, 'r') as f:
                return json.load(f)
    
    async def initialize(self) -> bool:
        """Inicializa o Native Audio Manager."""
        try:
            logger.info("üîä Inicializando Native Audio Manager...")
            
            # Verifica se o sistema suporta reprodu√ß√£o de √°udio
            if await self._check_audio_support():
                logger.info("‚úÖ Sistema de √°udio nativo dispon√≠vel")
                self.is_initialized = True
                return True
            else:
                logger.error("‚ùå Sistema de √°udio nativo n√£o dispon√≠vel")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao inicializar Native Audio Manager: {e}")
            return False
    
    async def _check_audio_support(self) -> bool:
        """Verifica se o sistema suporta reprodu√ß√£o de √°udio."""
        try:
            # Verifica se o comando 'mpv' est√° dispon√≠vel (suporta MP3 nativamente)
            result = subprocess.run(['which', 'mpv'], capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("‚úÖ mpv dispon√≠vel (suporta MP3)")
                return True
            
            # Verifica se o comando 'afplay' est√° dispon√≠vel (macOS)
            result = subprocess.run(['which', 'afplay'], capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("‚úÖ afplay dispon√≠vel (macOS)")
                return True
            
            # Verifica se o comando 'aplay' est√° dispon√≠vel (Linux)
            result = subprocess.run(['which', 'aplay'], capture_output=True, text=True)
            if result.returncode == 0:
                logger.info("‚úÖ aplay dispon√≠vel (Linux)")
                return True
            
            logger.warning("‚ö†Ô∏è Nenhum player de √°udio nativo encontrado")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao verificar suporte de √°udio: {e}")
            return False
    
    async def play_audio(self, audio_data: bytes) -> bool:
        """Reproduz √°udio usando o sistema nativo."""
        if not self.is_initialized:
            logger.error("Native Audio Manager n√£o inicializado")
            return False
        
        try:
            logger.info("üîä Reproduzindo √°udio nativo...")
            
            # Salva √°udio temporariamente
            with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_file_path = temp_file.name
            
            try:
                # Reproduz usando o sistema nativo
                success = await self._play_with_native_player(temp_file_path)
                
                if success:
                    logger.info("‚úÖ √Åudio reproduzido com sucesso")
                    return True
                else:
                    logger.error("‚ùå Falha na reprodu√ß√£o")
                    return False
                    
            finally:
                # Remove arquivo tempor√°rio
                os.unlink(temp_file_path)
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao reproduzir √°udio: {e}")
            return False
    
    async def _play_with_native_player(self, file_path: str) -> bool:
        """Reproduz arquivo usando player nativo."""
        try:
            # Prioriza mpv (suporta MP3 nativamente)
            if subprocess.run(['which', 'mpv'], capture_output=True).returncode == 0:
                cmd = ['mpv', '--no-video', '--no-terminal', '--really-quiet', file_path]
                logger.info("üéµ Usando mpv para reprodu√ß√£o")
            elif os.name == 'posix':  # macOS/Linux
                if os.path.exists('/System/Library/CoreServices/SystemVersion.plist'):
                    # macOS - usa afplay (s√≥ para WAV)
                    if file_path.endswith('.mp3'):
                        # Converte MP3 para WAV temporariamente
                        wav_path = file_path.replace('.mp3', '.wav')
                        convert_cmd = ['ffmpeg', '-i', file_path, '-acodec', 'pcm_s16le', '-ar', '44100', wav_path, '-y', '-loglevel', 'error']
                        
                        convert_process = await asyncio.create_subprocess_exec(
                            *convert_cmd,
                            stdout=asyncio.subprocess.PIPE,
                            stderr=asyncio.subprocess.PIPE
                        )
                        await convert_process.wait()
                        
                        if convert_process.returncode == 0:
                            cmd = ['afplay', wav_path]
                            cleanup_needed = True
                            logger.info("üéµ Convertendo MP3 para WAV e usando afplay")
                        else:
                            logger.error("‚ùå Falha na convers√£o MP3 para WAV")
                            return False
                    else:
                        cmd = ['afplay', file_path]
                        cleanup_needed = False
                        logger.info("üéµ Usando afplay para reprodu√ß√£o")
                else:
                    # Linux - usa aplay
                    cmd = ['aplay', file_path]
                    cleanup_needed = False
                    logger.info("üéµ Usando aplay para reprodu√ß√£o")
            else:
                # Windows - usa start
                cmd = ['start', file_path]
                cleanup_needed = False
                logger.info("üéµ Usando start para reprodu√ß√£o")
            
            # Executa o comando
            process = await asyncio.create_subprocess_exec(
                *cmd,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            
            # Aguarda a reprodu√ß√£o (m√°ximo 30 segundos)
            try:
                await asyncio.wait_for(process.wait(), timeout=30.0)
                success = process.returncode == 0
                
                # Log de debug
                if not success:
                    stderr_output = await process.stderr.read()
                    if stderr_output:
                        logger.warning(f"‚ö†Ô∏è Player stderr: {stderr_output.decode()}")
                
                # Limpa arquivo tempor√°rio se necess√°rio
                if 'cleanup_needed' in locals() and cleanup_needed and 'wav_path' in locals():
                    try:
                        os.unlink(wav_path)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro ao remover arquivo tempor√°rio: {e}")
                
                return success
            except asyncio.TimeoutError:
                # Se demorar muito, mata o processo
                process.terminate()
                await process.wait()
                
                # Limpa arquivo tempor√°rio se necess√°rio
                if 'cleanup_needed' in locals() and cleanup_needed and 'wav_path' in locals():
                    try:
                        os.unlink(wav_path)
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è Erro ao remover arquivo tempor√°rio: {e}")
                
                return True  # Assume que come√ßou a reproduzir
                
        except Exception as e:
            logger.error(f"‚ùå Erro no player nativo: {e}")
            return False
    
    async def capture_audio(self, duration: float = 5.0) -> Optional[bytes]:
        """Captura √°udio usando o sistema nativo."""
        if not self.is_initialized:
            logger.error("Native Audio Manager n√£o inicializado")
            return None
        
        try:
            logger.info(f"üé§ Capturando √°udio por {duration}s...")
            
            # Usa sox para captura (se dispon√≠vel)
            if await self._check_sox_available():
                return await self._capture_with_sox(duration)
            else:
                logger.warning("‚ö†Ô∏è sox n√£o dispon√≠vel, usando PyAudio como fallback")
                return await self._capture_with_pyaudio(duration)
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao capturar √°udio: {e}")
            return None
    
    async def _check_sox_available(self) -> bool:
        """Verifica se o sox est√° dispon√≠vel."""
        try:
            result = subprocess.run(['which', 'sox'], capture_output=True)
            return result.returncode == 0
        except Exception:
            return False
    
    async def _capture_with_sox(self, duration: float) -> Optional[bytes]:
        """Captura √°udio usando sox."""
        try:
            # Cria arquivo tempor√°rio
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                temp_file_path = temp_file.name
            
            try:
                # Comando sox para captura
                cmd = [
                    'sox', '-d', temp_file_path,
                    'trim', '0', str(duration),
                    'rate', '16000', 'channels', '1'
                ]
                
                process = await asyncio.create_subprocess_exec(
                    *cmd,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE
                )
                
                await process.wait()
                
                if process.returncode == 0:
                    # L√™ o arquivo capturado
                    with open(temp_file_path, 'rb') as f:
                        audio_data = f.read()
                    
                    logger.info(f"‚úÖ √Åudio capturado: {len(audio_data)} bytes")
                    return audio_data
                else:
                    logger.error("‚ùå Falha na captura com sox")
                    return None
                    
            finally:
                # Remove arquivo tempor√°rio
                os.unlink(temp_file_path)
                
        except Exception as e:
            logger.error(f"‚ùå Erro na captura com sox: {e}")
            return None
    
    async def _capture_with_pyaudio(self, duration: float) -> Optional[bytes]:
        """Captura √°udio usando PyAudio (fallback)."""
        try:
            import pyaudio
            
            audio = pyaudio.PyAudio()
            
            # Configura stream de entrada
            stream = audio.open(
                format=pyaudio.paInt16,
                channels=1,
                rate=16000,
                input=True,
                frames_per_buffer=1024
            )
            
            frames = []
            num_frames = int(16000 / 1024 * duration)
            
            for _ in range(num_frames):
                data = stream.read(1024, exception_on_overflow=False)
                frames.append(data)
            
            # Fecha stream
            stream.stop_stream()
            stream.close()
            audio.terminate()
            
            audio_data = b''.join(frames)
            logger.info(f"‚úÖ √Åudio capturado (PyAudio): {len(audio_data)} bytes")
            return audio_data
            
        except Exception as e:
            logger.error(f"‚ùå Erro na captura com PyAudio: {e}")
            return None
    
    async def cleanup(self) -> None:
        """Limpa recursos do Native Audio Manager."""
        try:
            logger.info("üßπ Limpando Native Audio Manager...")
            self.is_initialized = False
            logger.info("‚úÖ Native Audio Manager limpo")
        except Exception as e:
            logger.error(f"‚ùå Erro ao limpar Native Audio Manager: {e}")


# Exemplo de uso
async def main() -> None:
    """Exemplo de uso do Native Audio Manager."""
    audio_manager = NativeAudioManager()
    
    if await audio_manager.initialize():
        print("‚úÖ Native Audio Manager inicializado")
        
        # Testa reprodu√ß√£o (se tiver arquivo de teste)
        # audio_data = b'...'  # dados de √°udio MP3
        # success = await audio_manager.play_audio(audio_data)
        # print(f"Reprodu√ß√£o: {'‚úÖ' if success else '‚ùå'}")
        
        await audio_manager.cleanup()
    else:
        print("‚ùå Falha ao inicializar Native Audio Manager")


if __name__ == "__main__":
    asyncio.run(main())
