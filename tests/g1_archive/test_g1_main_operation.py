#!/usr/bin/env python3
"""
Teste Espec√≠fico para Main Operation Control - Estado Correto para Comandos de Bra√ßo.
Implementa a sequ√™ncia correta: Get Ready ‚Üí Main Operation Control
"""

import time
import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

class G1MainOperationTester:
    """Testador espec√≠fico para Main Operation Control."""
    
    def __init__(self):
        self.interface = "en11"
        self.robot_ip = "192.168.123.161"
        
        # Clientes SDK
        self.loco_client = None
        self.arm_client = None
        self.motion_switcher = None
        
        # A√ß√µes de bra√ßo para testar
        self.test_actions = [
            (99, "release_arm"),
            (11, "blow_kiss_with_both_hands_50hz"),
            (12, "blow_kiss_with_left_hand"),
            (13, "blow_kiss_with_right_hand"),
            (15, "both_hands_up"),
            (17, "clamp"),
            (18, "high_five_opt"),
            (19, "hug_opt"),
            (22, "refuse"),
            (23, "right_hand_up"),
            (24, "ultraman_ray"),
            (25, "wave_under_head"),
            (26, "wave_above_head"),
            (27, "shake_hand_opt"),
            (31, "extend_right_arm_forward"),
            (32, "right_hand_on_mouth"),
            (33, "right_hand_on_heart"),
            (34, "both_hands_up_deviate_right"),
            (35, "emphasize")
        ]
    
    def initialize_sdk(self):
        """Inicializa todos os clientes SDK."""
        try:
            from unitree_sdk2py.core.channel import ChannelFactoryInitialize
            from unitree_sdk2py.g1.loco.g1_loco_client import LocoClient
            from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient
            from unitree_sdk2py.comm.motion_switcher.motion_switcher_client import MotionSwitcherClient
            
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            print("‚úÖ SDK inicializado com interface en11")
            
            # Inicializar LocoClient
            self.loco_client = LocoClient()
            self.loco_client.SetTimeout(10.0)
            self.loco_client.Init()
            print("‚úÖ LocoClient inicializado")
            
            # Inicializar ArmActionClient
            self.arm_client = G1ArmActionClient()
            self.arm_client.SetTimeout(10.0)
            self.arm_client.Init()
            print("‚úÖ ArmActionClient inicializado")
            
            # Inicializar MotionSwitcherClient
            self.motion_switcher = MotionSwitcherClient()
            self.motion_switcher.SetTimeout(10.0)
            self.motion_switcher.Init()
            print("‚úÖ MotionSwitcherClient inicializado")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def check_current_mode(self):
        """Verifica o modo atual do G1."""
        try:
            if self.motion_switcher:
                status, result = self.motion_switcher.CheckMode()
                print(f"üìä MotionSwitcher Status: {status}")
                if result:
                    print(f"üìä Modo Atual: {result}")
                    return result
                return None
        except Exception as e:
            print(f"‚ùå Erro ao verificar modo: {e}")
        return None
    
    def setup_main_operation_control(self):
        """Configura o rob√¥ para Main Operation Control - ESTADO CORRETO para bra√ßos."""
        print("üöÄ CONFIGURANDO MAIN OPERATION CONTROL")
        print("=" * 50)
        
        # Verificar estado inicial
        print("üìä Estado inicial:")
        initial_mode = self.check_current_mode()
        
        # Sequ√™ncia correta: Zero Torque ‚Üí Damping ‚Üí Get Ready ‚Üí Main Operation Control
        print("\n1Ô∏è‚É£ Zero Torque (FSM 0)...")
        self.loco_client.SetFsmId(0)
        time.sleep(3)
        
        print("2Ô∏è‚É£ Damping (FSM 1)...")
        self.loco_client.SetFsmId(1)
        time.sleep(3)
        
        print("3Ô∏è‚É£ Get Ready (FSM 4)...")
        self.loco_client.SetFsmId(4)
        time.sleep(5)
        
        # Verificar se estamos em Get Ready
        get_ready_mode = self.check_current_mode()
        print(f"üìä Modo ap√≥s Get Ready: {get_ready_mode}")
        
        print("4Ô∏è‚É£ Main Operation Control...")
        print("‚ö†Ô∏è  IMPORTANTE: Para transicionar para Main Operation Control,")
        print("   voc√™ precisa usar o controle f√≠sico:")
        print("   - R1+X (do Get Ready)")
        print("   - L2+R2 (do Get Ready)")
        print("   - L2+DOWN (do Squat)")
        
        # Aguardar confirma√ß√£o do usu√°rio
        input("\nüéÆ Use o controle f√≠sico para transicionar para Main Operation Control, depois pressione Enter...")
        
        # Verificar estado final
        final_mode = self.check_current_mode()
        print(f"üìä Modo ap√≥s transi√ß√£o: {final_mode}")
        
        return True
    
    def test_arm_action(self, action_id, action_name):
        """Testa uma a√ß√£o de bra√ßo espec√≠fica."""
        print(f"\nüîÑ Testando {action_name} (ID: {action_id})")
        
        try:
            result = self.arm_client.ExecuteAction(action_id)
            print(f"   Status: {result}")
            
            if result == 0:
                print(f"   ‚úÖ SUCESSO: {action_name} funcionou!")
                time.sleep(3)  # Aguardar execu√ß√£o
                
                # Voltar ao estado inicial dos bra√ßos
                if action_id != 99:  # N√£o executar release_arm novamente
                    print("   üîÑ Voltando ao estado inicial dos bra√ßos...")
                    self.arm_client.ExecuteAction(99)  # release_arm
                    time.sleep(2)
                
                return True
            else:
                print(f"   ‚ùå FALHOU: {action_name} (Status: {result})")
                return False
                
        except Exception as e:
            print(f"   ‚ùå ERRO: {action_name}: {e}")
            return False
    
    def test_all_arm_actions(self):
        """Testa todas as a√ß√µes de bra√ßo em Main Operation Control."""
        print("\nüéØ TESTANDO TODAS AS A√á√ïES DE BRA√áO")
        print("=" * 50)
        
        results = {}
        
        for action_id, action_name in self.test_actions:
            success = self.test_arm_action(action_id, action_name)
            results[action_name] = success
            
            # Pausa entre a√ß√µes
            input(f"\nPressione Enter para testar pr√≥xima a√ß√£o...")
        
        return results
    
    def print_results(self, results):
        """Imprime resultados dos testes."""
        print(f"\n{'='*20} RESULTADOS FINAIS {'='*20}")
        
        successful = [name for name, success in results.items() if success]
        failed = [name for name, success in results.items() if not success]
        
        print(f"‚úÖ A√á√ïES QUE FUNCIONARAM ({len(successful)}):")
        for action in successful:
            print(f"   ‚úÖ {action}")
        
        print(f"\n‚ùå A√á√ïES QUE FALHARAM ({len(failed)}):")
        for action in failed:
            print(f"   ‚ùå {action}")
        
        print(f"\nüìä ESTAT√çSTICAS:")
        print(f"   Total testado: {len(results)}")
        print(f"   Sucessos: {len(successful)} ({len(successful)/len(results)*100:.1f}%)")
        print(f"   Falhas: {len(failed)} ({len(failed)/len(results)*100:.1f}%)")
        
        # An√°lise de depend√™ncias
        if failed:
            print(f"\nüîç AN√ÅLISE DE FALHAS:")
            print("   Poss√≠veis causas:")
            print("   - Algumas a√ß√µes podem precisar de estados espec√≠ficos (LowStand, HighStand)")
            print("   - Algumas a√ß√µes podem estar desabilitadas")
            print("   - Algumas a√ß√µes podem precisar de configura√ß√µes adicionais")
    
    def run_test(self):
        """Executa o teste completo."""
        print("ü§ñ TESTE MAIN OPERATION CONTROL - COMANDOS DE BRA√áO")
        print("=" * 60)
        
        # Configurar Main Operation Control
        if not self.setup_main_operation_control():
            print("‚ùå Falha ao configurar Main Operation Control")
            return
        
        # Confirmar se est√° pronto para testar
        print("\nüéØ PRONTO PARA TESTAR COMANDOS DE BRA√áO")
        print("‚ö†Ô∏è  Certifique-se de que o rob√¥ est√° em Main Operation Control")
        
        confirm = input("Deseja testar todos os comandos de bra√ßo? (s/n): ").strip().lower()
        if confirm != 's':
            print("‚ùå Teste cancelado")
            return
        
        # Testar todas as a√ß√µes
        results = self.test_all_arm_actions()
        
        # Mostrar resultados
        self.print_results(results)

def main():
    """Fun√ß√£o principal."""
    print("ü§ñ TESTE MAIN OPERATION CONTROL G1")
    print("=" * 60)
    
    tester = G1MainOperationTester()
    
    if not tester.initialize_sdk():
        print("‚ùå Falha na inicializa√ß√£o do SDK")
        return
    
    print("\n‚úÖ SDK inicializado com sucesso!")
    print("üéØ OBJETIVO: Testar comandos de bra√ßo em Main Operation Control")
    print("‚ö†Ô∏è  IMPORTANTE: Voc√™ precisar√° usar o controle f√≠sico para transicionar")
    
    input("\nPressione Enter para continuar...")
    
    tester.run_test()

if __name__ == "__main__":
    main()
