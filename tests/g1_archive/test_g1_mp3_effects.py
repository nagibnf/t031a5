#!/usr/bin/env python3
"""
Teste G1 - Convers√£o e Reprodu√ß√£o de MP3
Converte MP3 para WAV 16kHz mono e testa no rob√¥.
"""

import time
import sys
import os
import subprocess
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.audio.g1_audio_client import AudioClient
from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient

def convert_mp3_to_wav(input_mp3, output_wav):
    """Converte MP3 para WAV 16kHz mono usando ffmpeg."""
    try:
        print(f"üîÑ Convertendo {input_mp3} para {output_wav}...")
        
        # Comando ffmpeg para converter para 16kHz mono WAV
        cmd = [
            'ffmpeg',
            '-i', input_mp3,
            '-ar', '16000',  # Sample rate 16kHz
            '-ac', '1',      # Mono
            '-f', 'wav',     # Formato WAV
            '-y',            # Sobrescrever arquivo existente
            output_wav
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Convers√£o conclu√≠da: {output_wav}")
            
            # Verificar tamanho do arquivo
            if os.path.exists(output_wav):
                size = os.path.getsize(output_wav)
                print(f"üìä Tamanho do arquivo WAV: {size:,} bytes")
                return True
            else:
                print("‚ùå Arquivo WAV n√£o foi criado")
                return False
        else:
            print(f"‚ùå Erro na convers√£o: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao converter: {e}")
        return False

def read_wav(wav_file):
    """L√™ arquivo WAV usando a fun√ß√£o do SDK."""
    try:
        # Importar fun√ß√£o do SDK
        sys.path.insert(0, str(Path(__file__).parent / "unitree_sdk2_python/example/g1/audio"))
        from wav import read_wav as sdk_read_wav
        
        # Ler WAV usando fun√ß√£o do SDK
        pcm_list, sample_rate, num_channels, is_ok = sdk_read_wav(wav_file)
        
        print(f"üìä WAV Info:")
        print(f"  - Sample Rate: {sample_rate} Hz")
        print(f"  - Channels: {num_channels}")
        print(f"  - PCM Length: {len(pcm_list)} bytes")
        print(f"  - Read Success: {is_ok}")
        
        # Verificar se √© compat√≠vel
        if not is_ok:
            print("‚ùå Falha ao ler WAV")
            return None
        if sample_rate != 16000:
            print("‚ö†Ô∏è  WAV n√£o √© 16kHz!")
            return None
        if num_channels != 1:
            print("‚ö†Ô∏è  WAV n√£o √© mono!")
            return None
        
        print(f"‚úÖ WAV compat√≠vel com G1")
        print(f"üìä Dura√ß√£o: {len(pcm_list) / (sample_rate * 2):.2f} segundos")
        
        return pcm_list
        
    except Exception as e:
        print(f"‚ùå Erro ao ler WAV: {e}")
        return None

def play_pcm_stream(audio_client, pcm_data, stream_name="effects"):
    """Reproduz dados PCM no rob√¥ usando fun√ß√£o do SDK."""
    try:
        # Importar fun√ß√£o do SDK
        sys.path.insert(0, str(Path(__file__).parent / "unitree_sdk2_python/example/g1/audio"))
        from wav import play_pcm_stream as sdk_play_pcm_stream
        
        print(f"üéµ Reproduzindo √°udio...")
        print(f"üìä Dados PCM: {len(pcm_data)} bytes")
        print(f"üìä Stream Name: {stream_name}")
        
        # Usar fun√ß√£o do SDK
        sdk_play_pcm_stream(audio_client, pcm_data, stream_name, chunk_size=96000, sleep_time=0.1, verbose=True)
        
        print("‚úÖ √Åudio enviado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao reproduzir: {e}")
        return False

class G1MP3EffectsTest:
    """Teste de convers√£o e reprodu√ß√£o de MP3 no G1."""
    
    def __init__(self):
        self.interface = "en11"
        self.audio_client = None
        self.arm_client = None
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            print("‚úÖ SDK inicializado")
            
            # Inicializar clientes
            self.audio_client = AudioClient()
            self.audio_client.SetTimeout(10.0)
            self.audio_client.Init()
            print("‚úÖ AudioClient inicializado")
            
            self.arm_client = G1ArmActionClient()
            self.arm_client.SetTimeout(5.0)
            self.arm_client.Init()
            print("‚úÖ ArmActionClient inicializado")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def setup_audio(self):
        """Configura o sistema de √°udio."""
        try:
            print("üîä Configurando √°udio...")
            
            # Definir volume para 100% (m√°ximo)
            volume_result = self.audio_client.SetVolume(100)
            if volume_result == 0:
                print("‚úÖ Volume configurado para 100% (m√°ximo)")
            else:
                print(f"‚ö†Ô∏è  Erro ao configurar volume: {volume_result}")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o de √°udio: {e}")
            return False
    
    def test_mp3_conversion(self):
        """Testa convers√£o de MP3 para WAV."""
        print("\nüîÑ TESTE CONVERS√ÉO MP3")
        print("=" * 40)
        
        # Caminhos dos arquivos
        input_mp3 = "./audio/effects/evil-laugh-89423.mp3"
        output_wav = "./audio/effects/evil-laugh-89423.wav"
        
        # Verificar se MP3 existe
        if not os.path.exists(input_mp3):
            print(f"‚ùå Arquivo MP3 n√£o encontrado: {input_mp3}")
            return False
        
        print(f"üìÅ MP3 encontrado: {input_mp3}")
        
        # Converter MP3 para WAV
        if not convert_mp3_to_wav(input_mp3, output_wav):
            return False
        
        # Ler WAV convertido
        pcm_data = read_wav(output_wav)
        if pcm_data is None:
            return False
        
        return pcm_data
    
    def test_audio_playback(self, pcm_data):
        """Testa reprodu√ß√£o do √°udio no rob√¥."""
        print("\nüéµ TESTE REPRODU√á√ÉO √ÅUDIO")
        print("=" * 40)
        
        # LED azul para indicar reprodu√ß√£o
        self.audio_client.LedControl(0, 0, 255)
        
        # Reproduzir √°udio
        if play_pcm_stream(self.audio_client, pcm_data):
            print("‚úÖ Reprodu√ß√£o conclu√≠da!")
            
            # Aguardar um pouco
            time.sleep(1)
            
            # Parar reprodu√ß√£o
            stop_result = self.audio_client.PlayStop("effects")
            if stop_result == 0:
                print("‚úÖ Reprodu√ß√£o parada")
            else:
                print(f"‚ö†Ô∏è  Erro ao parar reprodu√ß√£o: {stop_result}")
            
            # Voltar LED ao estado original
            self.audio_client.LedControl(173, 216, 230)
            
            return True
        else:
            print("‚ùå Falha na reprodu√ß√£o")
            return False
    
    def test_movement_with_audio(self, pcm_data):
        """Testa movimento com √°udio."""
        print("\nüé≠ TESTE MOVIMENTO + √ÅUDIO")
        print("=" * 40)
        
        # 1. Relaxar bra√ßos
        print("üîÑ Relaxando bra√ßos...")
        relax_result = self.arm_client.ExecuteAction(99)
        if relax_result == 0:
            print("‚úÖ Bra√ßos relaxados")
        else:
            print(f"‚ö†Ô∏è  Falha ao relaxar: {relax_result}")
        
        time.sleep(2)
        
        # 2. Executar movimento
        print("ü§ö Executando movimento (ID 32)...")
        move_result = self.arm_client.ExecuteAction(32)
        if move_result == 0:
            print("‚úÖ Movimento executado")
        else:
            print(f"‚ùå Movimento falhou: {move_result}")
            return False
        
        # 3. Aguardar e reproduzir √°udio
        time.sleep(2)  # Aguardar movimento come√ßar
        
        print("üéµ Reproduzindo √°udio durante movimento...")
        self.audio_client.LedControl(255, 255, 0)  # Amarelo para √°udio
        
        if play_pcm_stream(self.audio_client, pcm_data):
            print("‚úÖ √Åudio reproduzido durante movimento!")
        else:
            print("‚ùå Falha na reprodu√ß√£o do √°udio")
        
        time.sleep(2)
        
        # 4. Parar √°udio
        self.audio_client.PlayStop("effects")
        
        # 5. Relaxar novamente
        print("üîÑ Relaxando bra√ßos...")
        self.arm_client.ExecuteAction(99)
        
        # 6. Voltar LED ao estado original
        self.audio_client.LedControl(173, 216, 230)
        
        return True
    
    def run_test(self):
        """Executa todos os testes."""
        print("üéµ G1 TESTE MP3 EFFECTS")
        print("=" * 50)
        
        if not self.initialize_sdk():
            return False
        
        if not self.setup_audio():
            return False
        
        # 1. Converter MP3 para WAV
        pcm_data = self.test_mp3_conversion()
        if pcm_data is None:
            return False
        
        # 2. Testar reprodu√ß√£o simples
        self.test_audio_playback(pcm_data)
        
        # 3. Testar movimento com √°udio
        self.test_movement_with_audio(pcm_data)
        
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS!")
        return True

def main():
    """Fun√ß√£o principal."""
    print("üéµ G1 TESTE MP3 EFFECTS")
    print("=" * 60)
    print("üéØ OBJETIVO: Converter MP3 para WAV e testar no rob√¥")
    print("üìã TESTES:")
    print("  - Convers√£o MP3 ‚Üí WAV 16kHz mono")
    print("  - Reprodu√ß√£o de √°udio")
    print("  - Movimento + √Åudio sincronizado")
    print("  - Volume m√°ximo (100%)")
    
    response = input("\nDeseja continuar? (s/n): ").strip().lower()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada")
        return
    
    tester = G1MP3EffectsTest()
    
    if tester.run_test():
        print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
    else:
        print("\n‚ùå TESTE FALHOU")

if __name__ == "__main__":
    main()
