#!/usr/bin/env python3
"""
Teste G1 - Sistema √Åudio Completo
Testa TTS, LEDs e movimento de forma clara e vis√≠vel.
"""

import time
import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.audio.g1_audio_client import AudioClient
from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient
from unitree_sdk2py.g1.loco.g1_loco_client import LocoClient
from unitree_sdk2py.comm.motion_switcher.motion_switcher_client import MotionSwitcherClient

class G1AudioSystemTest:
    """Teste completo do sistema de √°udio do G1."""
    
    def __init__(self):
        self.interface = "en11"
        self.audio_client = None
        self.arm_client = None
        self.loco_client = None
        self.motion_switcher = None
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            print("‚úÖ SDK inicializado")
            
            # Inicializar clientes
            self.audio_client = AudioClient()
            self.audio_client.SetTimeout(10.0)
            self.audio_client.Init()
            print("‚úÖ AudioClient inicializado")
            
            self.arm_client = G1ArmActionClient()
            self.arm_client.SetTimeout(5.0)
            self.arm_client.Init()
            print("‚úÖ ArmActionClient inicializado")
            
            self.loco_client = LocoClient()
            self.loco_client.SetTimeout(5.0)
            self.loco_client.Init()
            print("‚úÖ LocoClient inicializado")
            
            self.motion_switcher = MotionSwitcherClient()
            self.motion_switcher.SetTimeout(5.0)
            self.motion_switcher.Init()
            print("‚úÖ MotionSwitcherClient inicializado")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def setup_audio(self):
        """Configura o sistema de √°udio."""
        try:
            print("üîä Configurando √°udio...")
            
            # Verificar volume atual
            volume_code, volume_data = self.audio_client.GetVolume()
            if volume_code == 0:
                print(f"üìä Volume atual: {volume_data}")
            
            # Definir volume para 100% (m√°ximo)
            volume_result = self.audio_client.SetVolume(100)
            if volume_result == 0:
                print("‚úÖ Volume configurado para 100% (m√°ximo)")
            else:
                print(f"‚ö†Ô∏è  Erro ao configurar volume: {volume_result}")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro na configura√ß√£o de √°udio: {e}")
            return False
    
    def test_tts_sequence(self):
        """Teste sequ√™ncia de TTS com feedback visual."""
        print("\nüó£Ô∏è  TESTE SEQU√äNCIA TTS")
        print("=" * 40)
        
        messages = [
            "Teste n√∫mero um",
            "Teste n√∫mero dois", 
            "Teste n√∫mero tr√™s",
            "Sistema funcionando"
        ]
        
        colors = [
            (255, 0, 0),    # Vermelho
            (0, 255, 0),    # Verde
            (0, 0, 255),    # Azul
            (255, 255, 0)   # Amarelo
        ]
        
        for i, (message, color) in enumerate(zip(messages, colors), 1):
            print(f"\nüó£Ô∏è  TTS {i}: '{message}'")
            
            # LED indicando qual TTS est√° tocando
            self.audio_client.LedControl(color[0], color[1], color[2])
            
            # Executar TTS
            result = self.audio_client.TtsMaker(message, 0)
            if result == 0:
                print(f"‚úÖ TTS {i} executado")
            else:
                print(f"‚ùå TTS {i} falhou: {result}")
            
            # Aguardar
            time.sleep(3)
        
        # Voltar LED ao estado original
        self.audio_client.LedControl(173, 216, 230)  # Azul claro
        print("\n‚úÖ Sequ√™ncia TTS conclu√≠da!")
        return True
    
    def test_movement_with_tts(self):
        """Testa movimento com TTS."""
        print("\nü§ö TESTE MOVIMENTO + TTS")
        print("=" * 40)
        
        # Verificar estado do rob√¥
        try:
            status, result = self.motion_switcher.CheckMode()
            print(f"üìä Estado atual: {result}")
        except:
            print("‚ö†Ô∏è  N√£o foi poss√≠vel verificar estado")
        
        movements = [
            (32, "M√£o na boca", "Executando m√£o na boca"),
            (11, "Acenar", "Acenando para voc√™"),
            (99, "Relaxar", "Voltando ao estado relaxado")
        ]
        
        for move_id, move_name, tts_text in movements:
            print(f"\nü§ö Movimento: {move_name} (ID {move_id})")
            
            # TTS antes do movimento
            print(f"üó£Ô∏è  TTS: '{tts_text}'")
            tts_result = self.audio_client.TtsMaker(tts_text, 0)
            if tts_result == 0:
                print("‚úÖ TTS executado")
            else:
                print(f"‚ùå TTS falhou: {tts_result}")
            
            time.sleep(2)  # Aguardar TTS
            
            # Executar movimento
            print(f"ü§ö Executando movimento {move_id}...")
            try:
                move_result = self.arm_client.ExecuteAction(move_id)
                if move_result == 0:
                    print(f"‚úÖ Movimento {move_name} executado")
                else:
                    print(f"‚ùå Movimento {move_name} falhou: {move_result}")
            except Exception as e:
                print(f"‚ùå Erro no movimento: {e}")
            
            time.sleep(3)  # Aguardar movimento
        
        print("\n‚úÖ Teste movimento + TTS conclu√≠do!")
    
    def test_visual_feedback(self):
        """Testa feedback visual com LEDs."""
        print("\nüí° TESTE FEEDBACK VISUAL")
        print("=" * 40)
        
        # Sequ√™ncia de cores com TTS explicativo
        led_tests = [
            ((255, 0, 0), "LED vermelho ativado"),
            ((0, 255, 0), "LED verde ativado"),
            ((0, 0, 255), "LED azul ativado"),
            ((255, 255, 0), "LED amarelo ativado"),
            ((255, 0, 255), "LED magenta ativado"),
            ((0, 255, 255), "LED ciano ativado"),
            ((173, 216, 230), "Voltando ao estado original")
        ]
        
        for i, (color, description) in enumerate(led_tests, 1):
            print(f"\nüí° Teste {i}: {description}")
            
            # TTS
            tts_result = self.audio_client.TtsMaker(description, 0)
            if tts_result == 0:
                print("‚úÖ TTS executado")
            
            # LED
            self.audio_client.LedControl(color[0], color[1], color[2])
            print(f"üí° LED: RGB({color[0]}, {color[1]}, {color[2]})")
            
            time.sleep(2)
        
        print("\n‚úÖ Teste visual conclu√≠do!")
    
    def run_test(self):
        """Executa todos os testes."""
        print("üé≠ G1 SISTEMA √ÅUDIO COMPLETO")
        print("=" * 50)
        
        if not self.initialize_sdk():
            return False
        
        if not self.setup_audio():
            return False
        
        # 1. Teste sequ√™ncia TTS
        self.test_tts_sequence()
        
        # 2. Teste movimento + TTS
        self.test_movement_with_tts()
        
        # 3. Teste feedback visual
        self.test_visual_feedback()
        
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS!")
        
        # Resumo final
        print(f"\nüìä RESUMO FINAL:")
        print("=" * 20)
        print("üó£Ô∏è  TTS: Testado")
        print("ü§ö Movimentos: Testados")
        print("üí° LEDs: Testados")
        print("üéµ Sistema: Funcionando")
        
        return True

def main():
    """Fun√ß√£o principal."""
    print("üé≠ G1 SISTEMA √ÅUDIO - TESTE COMPLETO")
    print("=" * 60)
    print("üéØ OBJETIVO: Testar sistema de √°udio, TTS, movimento e LEDs")
    print("üìã TESTES:")
    print("  - Sequ√™ncia TTS com feedback visual")
    print("  - Movimentos com narra√ß√£o TTS")
    print("  - Feedback visual colorido")
    print("  - Volume m√°ximo (100%)")
    
    response = input("\nDeseja continuar? (s/n): ").strip().lower()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada")
        return
    
    tester = G1AudioSystemTest()
    
    if tester.run_test():
        print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
    else:
        print("\n‚ùå TESTE FALHOU")

if __name__ == "__main__":
    main()
