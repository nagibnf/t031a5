#!/usr/bin/env python3
"""
Captura posi√ß√µes das juntas em tempo real usando DDS.
√ötil para capturar posi√ß√µes de movimentos espec√≠ficos.
"""

import time
import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from unitree_sdk2py.core.channel import ChannelFactoryInitialize, ChannelSubscriber
from unitree_sdk2py.idl.unitree_hg.msg.dds_ import LowState_

class PositionCapture:
    """Captura posi√ß√µes das juntas em tempo real."""
    
    def __init__(self):
        self.interface = "en11"
        self.low_state = None
        self.first_update = False
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            print("‚úÖ SDK inicializado")
            return True
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def init_subscriber(self):
        """Inicializa subscriber para capturar posi√ß√µes."""
        try:
            self.lowstate_subscriber = ChannelSubscriber("rt/lowstate", LowState_)
            self.lowstate_subscriber.Init(self.low_state_handler, 10)
            print("‚úÖ Subscriber inicializado")
            return True
        except Exception as e:
            print(f"‚ùå Erro no subscriber: {e}")
            return False
    
    def low_state_handler(self, msg: LowState_):
        """Handler para mensagens de estado."""
        self.low_state = msg
        if not self.first_update:
            self.first_update = True
    
    def get_right_arm_positions(self):
        """Obt√©m posi√ß√µes do bra√ßo direito."""
        if not self.low_state:
            return None
        
        positions = {
            "RightShoulderPitch": self.low_state.motor_state[22].q,
            "RightShoulderRoll": self.low_state.motor_state[23].q,
            "RightShoulderYaw": self.low_state.motor_state[24].q,
            "RightElbow": self.low_state.motor_state[25].q,
            "RightWristRoll": self.low_state.motor_state[26].q
        }
        
        return positions
    
    def capture_positions(self, duration=10):
        """Captura posi√ß√µes por um per√≠odo de tempo."""
        print(f"üìä Capturando posi√ß√µes por {duration} segundos...")
        print("üéØ Execute o movimento desejado durante este per√≠odo")
        print("=" * 60)
        
        start_time = time.time()
        last_print_time = 0
        
        while time.time() - start_time < duration:
            if self.low_state:
                positions = self.get_right_arm_positions()
                current_time = time.time() - start_time
                
                # Imprimir a cada 0.5 segundos
                if current_time - last_print_time >= 0.5:
                    print(f"‚è±Ô∏è  {current_time:.1f}s:")
                    for joint, pos in positions.items():
                        print(f"   {joint}: {pos:.4f} rad")
                    print()
                    last_print_time = current_time
            
            time.sleep(0.1)
        
        # Posi√ß√µes finais
        if self.low_state:
            final_positions = self.get_right_arm_positions()
            print("üìã POSI√á√ïES FINAIS:")
            print("=" * 30)
            for joint, pos in final_positions.items():
                print(f"{joint}: {pos:.4f} rad")
            
            # Formato para usar no c√≥digo
            print("\nüìù FORMATO PARA C√ìDIGO:")
            print("=" * 30)
            print("self.right_arm_positions = {")
            for joint, pos in final_positions.items():
                print(f"    G1JointIndex.{joint}: {pos:.4f},")
            print("}")
    
    def run_capture(self):
        """Executa a captura."""
        print("üìä CAPTURA DE POSI√á√ïES EM TEMPO REAL")
        print("=" * 50)
        
        if not self.initialize_sdk():
            return False
        
        if not self.init_subscriber():
            return False
        
        # Aguardar primeiro estado
        print("‚è≥ Aguardando dados do rob√¥...")
        while not self.first_update:
            time.sleep(0.1)
        
        print("‚úÖ Dados recebidos! Iniciando captura...")
        
        # Capturar posi√ß√µes
        self.capture_positions(10)  # 10 segundos
        
        return True

def main():
    """Fun√ß√£o principal."""
    print("üìä CAPTURA DE POSI√á√ïES - BRA√áO DIREITO")
    print("=" * 50)
    print("üéØ OBJETIVO: Capturar posi√ß√µes em tempo real")
    print("üìã INSTRU√á√ïES:")
    print("1. Execute este script")
    print("2. Execute o movimento desejado no rob√¥")
    print("3. Observe as posi√ß√µes capturadas")
    
    response = input("Deseja continuar? (s/n): ").strip().lower()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada")
        return
    
    capturer = PositionCapture()
    capturer.run_capture()

if __name__ == "__main__":
    main()
