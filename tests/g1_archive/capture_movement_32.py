#!/usr/bin/env python3
"""
Captura as posi√ß√µes reais do movimento ID 32 (m√£o na boca)
para usar no movimento personalizado de riso.
"""

import time
import sys
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from unitree_sdk2py.core.channel import ChannelFactoryInitialize
from unitree_sdk2py.g1.arm.g1_arm_action_client import G1ArmActionClient
from unitree_sdk2py.g1.loco.g1_loco_client import LocoClient
from unitree_sdk2py.comm.motion_switcher.motion_switcher_client import MotionSwitcherClient

class Movement32Capture:
    """Captura posi√ß√µes do movimento ID 32."""
    
    def __init__(self):
        self.interface = "en11"
        self.arm_client = None
        self.loco_client = None
        self.motion_switcher = None
        
    def initialize_sdk(self):
        """Inicializa o SDK."""
        try:
            print("üîß Inicializando SDK...")
            ChannelFactoryInitialize(0, self.interface)
            print("‚úÖ SDK inicializado")
            
            # Inicializar clientes
            self.arm_client = G1ArmActionClient()
            self.arm_client.SetTimeout(5.0)
            self.arm_client.Init()
            
            self.loco_client = LocoClient()
            self.loco_client.SetTimeout(5.0)
            self.loco_client.Init()
            
            self.motion_switcher = MotionSwitcherClient()
            self.motion_switcher.SetTimeout(5.0)
            self.motion_switcher.Init()
            
            print("‚úÖ Clientes inicializados")
            return True
        except Exception as e:
            print(f"‚ùå Erro na inicializa√ß√£o: {e}")
            return False
    
    def check_current_state(self):
        """Verifica o estado atual do rob√¥."""
        try:
            status, result = self.motion_switcher.CheckMode()
            print(f"üìä Status atual: {status}")
            
            if result:
                print(f"üìä Modo atual: {result}")
                if isinstance(result, dict) and result.get('name') == 'ai':
                    print("‚úÖ Rob√¥ j√° est√° em Main Operation Control!")
                    return True
                else:
                    print(f"‚ö†Ô∏è  Rob√¥ est√° em modo: {result}")
                    return False
            else:
                print("‚ùå N√£o foi poss√≠vel verificar o modo atual")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao verificar estado: {e}")
            return False
    
    def setup_main_operation_control(self):
        """Configura o rob√¥ para Main Operation Control se necess√°rio."""
        if self.check_current_state():
            print("‚úÖ Rob√¥ j√° est√° pronto para comandos de bra√ßo!")
            return True
        
        print("üöÄ Configurando Main Operation Control...")
        
        # Zero Torque ‚Üí Damping ‚Üí Get Ready
        print("1Ô∏è‚É£ Zero Torque...")
        self.loco_client.SetFsmId(0)
        time.sleep(2)
        
        print("2Ô∏è‚É£ Damping...")
        self.loco_client.SetFsmId(1)
        time.sleep(2)
        
        print("3Ô∏è‚É£ Get Ready...")
        self.loco_client.SetFsmId(4)
        time.sleep(3)
        
        print("4Ô∏è‚É£ Use R1+X no controle f√≠sico para Main Operation Control")
        input("Pressione Enter ap√≥s R1+X...")
        
        return self.check_current_state()
    
    def capture_movement_32(self):
        """Captura as posi√ß√µes do movimento ID 32."""
        print("üéØ CAPTURANDO MOVIMENTO ID 32 (m√£o na boca)")
        print("=" * 50)
        
        # 1. Verificar estado inicial
        print("üìä Estado inicial do bra√ßo direito:")
        print("   (Execute manualmente o movimento ID 32 para ver as posi√ß√µes)")
        
        # 2. Executar movimento ID 32
        print("\nü§ö Executando movimento ID 32...")
        result = self.arm_client.ExecuteAction(32)  # right_hand_on_mouth
        
        if result == 0:
            print("‚úÖ Movimento ID 32 executado com sucesso!")
            print("\nüìã INSTRU√á√ïES:")
            print("1. Observe o bra√ßo direito na posi√ß√£o 'm√£o na boca'")
            print("2. Use o script 'capture_positions.py' para capturar as posi√ß√µes")
            print("3. Ou me informe as posi√ß√µes observadas")
            
            # Aguardar um pouco para estabilizar
            time.sleep(3)
            
            # 3. Voltar ao estado inicial
            print("\nüîÑ Voltando ao estado inicial...")
            self.arm_client.ExecuteAction(99)  # release_arm
            time.sleep(2)
            
            return True
        else:
            print(f"‚ùå Movimento ID 32 falhou (Status: {result})")
            return False
    
    def run_capture(self):
        """Executa a captura completa."""
        print("üéØ CAPTURA DE MOVIMENTO ID 32")
        print("=" * 40)
        
        if not self.initialize_sdk():
            return False
        
        if not self.setup_main_operation_control():
            return False
        
        return self.capture_movement_32()

def main():
    """Fun√ß√£o principal."""
    print("üéØ CAPTURA DE MOVIMENTO ID 32 - M√ÉO NA BOCA")
    print("=" * 50)
    print("üéØ OBJETIVO: Capturar posi√ß√µes reais do movimento ID 32")
    
    response = input("Deseja continuar? (s/n): ").strip().lower()
    if response not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada")
        return
    
    capturer = Movement32Capture()
    capturer.run_capture()

if __name__ == "__main__":
    main()
