#!/usr/bin/env python3
"""
Teste Estrutura t031a5 - Verifica√ß√£o da Arquitetura

Testa a estrutura e organiza√ß√£o do sistema t031a5
sem depender do SDK Unitree.
"""

import sys
import asyncio
from pathlib import Path

# Adiciona o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))


class T031a5StructureTest:
    """Teste da estrutura do sistema t031a5."""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.src_path = self.project_root / "src"
        self.config_path = self.project_root / "config"
        self.tests_path = self.project_root / "tests"
    
    def run_structure_test(self):
        """Executa teste da estrutura."""
        print("üéØ TESTE ESTRUTURA t031a5")
        print("=" * 50)
        
        results = []
        
        # 1. Verificar estrutura de diret√≥rios
        print("\nüìÅ 1. VERIFICANDO ESTRUTURA DE DIRET√ìRIOS...")
        results.append(self._test_directory_structure())
        
        # 2. Verificar m√≥dulos principais
        print("\nüß† 2. VERIFICANDO M√ìDULOS PRINCIPAIS...")
        results.append(self._test_main_modules())
        
        # 3. Verificar configura√ß√µes
        print("\n‚öôÔ∏è 3. VERIFICANDO CONFIGURA√á√ïES...")
        results.append(self._test_configurations())
        
        # 4. Verificar testes
        print("\nüß™ 4. VERIFICANDO TESTES...")
        results.append(self._test_tests())
        
        # 5. Verificar documenta√ß√£o
        print("\nüìö 5. VERIFICANDO DOCUMENTA√á√ÉO...")
        results.append(self._test_documentation())
        
        # Resumo
        print("\nüìä RESUMO DOS TESTES:")
        print("=" * 50)
        
        all_passed = True
        for test_name, passed, details in results:
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {test_name}")
            if not passed and details:
                print(f"    {details}")
            all_passed = all_passed and passed
        
        if all_passed:
            print("\nüéâ TODOS OS TESTES PASSARAM!")
            print("üìã Estrutura do sistema t031a5 est√° correta")
        else:
            print("\n‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
            print("üîß Verifique os detalhes acima")
        
        return all_passed
    
    def _test_directory_structure(self):
        """Testa estrutura de diret√≥rios."""
        required_dirs = [
            self.src_path / "t031a5",
            self.src_path / "t031a5" / "unitree",
            self.src_path / "t031a5" / "inputs",
            self.src_path / "t031a5" / "actions",
            self.src_path / "t031a5" / "runtime",
            self.config_path,
            self.tests_path,
            self.project_root / "logs",
            self.project_root / "credentials"
        ]
        
        missing_dirs = []
        for dir_path in required_dirs:
            if not dir_path.exists():
                missing_dirs.append(str(dir_path.relative_to(self.project_root)))
        
        if missing_dirs:
            return "Estrutura de Diret√≥rios", False, f"Diret√≥rios faltando: {', '.join(missing_dirs)}"
        else:
            print("  ‚úÖ Todos os diret√≥rios principais existem")
            return "Estrutura de Diret√≥rios", True, None
    
    def _test_main_modules(self):
        """Testa m√≥dulos principais."""
        required_files = [
            self.src_path / "t031a5" / "__init__.py",
            self.src_path / "t031a5" / "unitree" / "__init__.py",
            self.src_path / "t031a5" / "unitree" / "g1_interface.py",
            self.src_path / "t031a5" / "unitree" / "g1_controller.py",
            self.project_root / "test_t031a5_integrated.py"
        ]
        
        missing_files = []
        for file_path in required_files:
            if not file_path.exists():
                missing_files.append(str(file_path.relative_to(self.project_root)))
        
        if missing_files:
            return "M√≥dulos Principais", False, f"Arquivos faltando: {', '.join(missing_files)}"
        else:
            print("  ‚úÖ Todos os m√≥dulos principais existem")
            return "M√≥dulos Principais", True, None
    
    def _test_configurations(self):
        """Testa arquivos de configura√ß√£o."""
        config_files = [
            "g1_real.json5",
            "g1_mock.json5",
            "g1_basic.json5"
        ]
        
        missing_configs = []
        for config_file in config_files:
            config_path = self.config_path / config_file
            if not config_path.exists():
                missing_configs.append(config_file)
        
        if missing_configs:
            return "Configura√ß√µes", False, f"Configs faltando: {', '.join(missing_configs)}"
        else:
            print("  ‚úÖ Arquivos de configura√ß√£o existem")
            return "Configura√ß√µes", True, None
    
    def _test_tests(self):
        """Testa arquivos de teste."""
        test_files = [
            "test_g1_confirmed_features.py",
            "test_g1_integrated.py",
            "__init__.py"
        ]
        
        missing_tests = []
        for test_file in test_files:
            test_path = self.tests_path / test_file
            if not test_path.exists():
                missing_tests.append(test_file)
        
        if missing_tests:
            return "Testes", False, f"Testes faltando: {', '.join(missing_tests)}"
        else:
            print("  ‚úÖ Arquivos de teste existem")
            return "Testes", True, None
    
    def _test_documentation(self):
        """Testa documenta√ß√£o."""
        doc_files = [
            "README.md",
            "pyproject.toml",
            ".gitignore"
        ]
        
        missing_docs = []
        for doc_file in doc_files:
            doc_path = self.project_root / doc_file
            if not doc_path.exists():
                missing_docs.append(doc_file)
        
        if missing_docs:
            return "Documenta√ß√£o", False, f"Docs faltando: {', '.join(missing_docs)}"
        else:
            print("  ‚úÖ Documenta√ß√£o existe")
            return "Documenta√ß√£o", True, None


def main():
    """Fun√ß√£o principal."""
    print("üéØ Teste Estrutura t031a5 - Verifica√ß√£o da Arquitetura")
    print("=" * 80)
    
    test = T031a5StructureTest()
    success = test.run_structure_test()
    
    if success:
        print("\nüéâ SUCESSO: Estrutura do sistema t031a5 est√° correta!")
        print("üìã Pr√≥ximos passos:")
        print("   1. Instalar SDK Unitree: pip install unitree-sdk2py")
        print("   2. Configurar G1: config/g1_real.json5")
        print("   3. Executar teste: python tests/test_g1_confirmed_features.py")
        print("   4. Demonstra√ß√£o: python test_t031a5_integrated.py")
    else:
        print("\n‚ùå FALHA: Estrutura do sistema precisa ser corrigida")
        print("üîß Verifique os arquivos e diret√≥rios faltando")
    
    print("\n" + "=" * 80)


if __name__ == "__main__":
    main()
